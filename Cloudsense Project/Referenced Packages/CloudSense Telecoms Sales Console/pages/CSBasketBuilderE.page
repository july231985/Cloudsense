<apex:page standardController="cscfga__Product_Basket__c" extensions="csbb.CSBasketBuilderEController" standardStylesheets="true" id="p" >
<!--<apex:include pageName="pca__Component"/>-->
    <apex:pageMessages />
    <apex:form id="b">
        <apex:includeScript value="{!$Resource.csbb__JQuery1_10_2}" />
        <apex:includeScript value="{!$Resource.csbb__OverlayJs}"/>
        <apex:includeScript value="{!$Resource.csbb__jQueryBlockUI}"/>
        <apex:includeScript value="{!$Resource.csbb__jQueryjGrowlJS}"/>
        <apex:stylesheet value="{!$Resource.csbb__jQueryjGrowlCSS}"/>
        <style type="text/css">
            #calendarDisplay {
                background:white;
            }
            .addProductToBasket select {
                width:200px;
            }
            .hidden {
                display:none;
            }
            .center {
                text-align:center;
            }
            img.iconStyle16 {
                cursor:pointer;
                height:16px;
                width:16px;
            }
            img.iconStyle24 {
                cursor:pointer;
                height:24px;
                width:24px;
            }
            img.iconStyle24height {
                cursor:pointer;
                height:24px;
            }
            table.growl {
                margin: 0;
                padding: 0;
                width: 100%;
            }
            table.growl tr td {
                color: #ffffff;
                margin: 3px 0px 0px 3px;
                padding: 2px 5px;
            }
            table.growl tr td img {
                width: 20px;
                height: 20px;
            }
            .offerAvailableRow {
                cursor:pointer;
            }
            .offerNotAvailableRow {
                cursor:default;
            }
            .offerRow td {
                border-bottom:1px solid;
            }
            .offerRow:hover {
                background-color:#e0f0fd;
            }
            .offerNotAvailable {
                color:grey;
                font-weight:bold;
            }
            .offerAvailable {
                color:#000;
                font-weight:bold;
            }
            .numberCol {
                text-align:center;
            }
            .availableOffersTable {
                width:100%;
                border-spacing:0;
                border-collapse:collapse;
            }
            .productRequestsTable {
                width:100%;
                border-spacing:0;
                border-collapse:collapse;
            }
            .overflowTableWrap {
                display:block;
                overflow:auto;
            }
            .closeDivImg {
                height: 16px;
                display: block;
                text-align: right;
                margin-bottom: 10px;
            }
            .lineItemRow td {
                border-style:none;
                margin-left:20px;
            }
            #lineItemsTable {
                margin-left:120px;
            }
            #lineItemsTable td {
                border-style:none;
            }
            .lineItemsHeader {
                font-weight:bold;
            }
            .prodConfActions{
                margin-left:120px;
                margin-top:5px;
                margin-bottom:10px;
            }
            .addressDetailDiv {
                border: thin dotted #000;
                position: absolute;
                display: none;
                background:#fff;
                padding:5px;
            }
            .addressDetailTable {
                width:100%;
                background:#fff;
                border-spacing:0;
                border-collapse:collapse;
            }
            .complexBillingStructure {
                width:250px;
                height:150px;
            }
            .billAccSpacer {
                padding-left:30px;
            }
            #avCheckEADRequestType {
                width:160px;
                display:none;
            }
            #avblChks {
                width:230px;
                height:165px;
            }
            #calloutDetailsTable{
                border-spacing:0;
                border-collapse:collapse;
                text-align:left;
                width:100%;
            }

            .calloutHeaderRow td{
                border-top: 1px solid #000;
                padding-left:10px;
                border-bottom: 2px solid #000;
            }
            /* same as common Salesforce */
            .requiredInputBB {
                position: relative;
                height: 100%;
            }
            /* same as common Salesforce */
            .requiredBlockBB {
                background-color: #c00;
                position: absolute;
                left: -4px;
                width: 3px;
                top: 1px;
                bottom: 1px;
            }
            .attachmentList {
                border-collapse: collapse;
                width: 100%;
                margin-top: 5px;
            }
            .attachmentContainer {
                margin-left: 120px;
                margin-top: 20px;
                margin-right: 5px;
            }
            .errorText {
                font-weight: bold;
                color: #c00;
            }
            #pbProdConfMsgs {
                display:block;
                padding-left:120px;
            }
            .requiredFieldIleOverride {
                border-left: 3px solid #c00;
                padding-left: 1px;
            }
            /* overlay -------------------------- start */
            .workEditPanel {
                position:absolute;
                z-index:300;
                width:50%;
            }
            .wholeOverlay {
                position: absolute;
                z-index: 200;
                top: 0px;
                left: 0px;
                width: 100%;
                height: 1000px; /* for the billing accunt display */
                background-color:#000000;
                filter:progid:DXImageTransform.Microsoft.Alpha(opacity=50);
                opacity:0.7;
                cursor:default;
            }
            #processing_container {
                min-width: 1000px;
                max-width: 1000px;
                /* height: 690px; */
                background: #FCF8F8;
                border: solid 1px #00303f;
                color: #00303f;
            }
            #processing_content {
                text-align: center;
                vertical-align:middle;
                font-size: .9em;
                font-weight: bold;
                padding:10px;
            }
                    
            #configurationEditIFrame {
                min-width: 975px;
                max-width: 975px;
                background: #FCF8F8;
                border: solid 0px #00303f;
                color: #00303f;
            }
            #approvalHistoryIFrame {
                min-width: 975px;
                max-width: 975px;
                height:100%;
                /* background: #FCF8F8; */
                border: solid 0px #00303f;
            }
            /* overlay -------------------------- end */
            .BBTableHeader td {
                background: #f2f3f3;
                border-width: 0 0 1px 1px;
                border-color: #e0e3e5;
                font-weight:bold;
            }
             
            .selectAddressRow {
                cursor:pointer;
                height:27px;
            }
            .selectAddressRow td {
                border-bottom:1px solid;
                font-family:Arial,Helvetica,sans-serif;
            }
            .selectAddressRow:hover {
                background-color:#e0f0fd;
            }
            #selectedBTAddress {
                background-color:#EEEEEE;
                width: 240px;
                font-weight:bold;
                border: 1px solid #CCCCCC;
                border-radius: 2px;
                padding:10px;
            }
            #selectedBTAddress:hover {
                color:#015BA7;
                cursor:pointer;
                text-decoration:underline;
            }
        </style>
        
        <script type="text/javascript">
        //(function($){
            $( document ).ready(function() {
                if ('{!cscfga__Product_Basket__c.Id}' != '') {
                    // layout basket content header based on user profile
                    var basketHeaderRow = '<tr class="headerRow">\n';
                    basketHeaderRow = basketHeaderRow + '<td class="iconColumn"></td>\n';
                    basketHeaderRow = basketHeaderRow + '<td class="iconColumn"></td>\n';
                    // delete icon hidden
                    // basketHeaderRow = basketHeaderRow + '<td class="iconColumn"></td>\n';
                    basketHeaderRow = basketHeaderRow + '<td class="iconColumn"></td>\n';
                    basketHeaderRow = basketHeaderRow + '<td>Product Category</td>\n';
                    //basketHeaderRow = basketHeaderRow + '<td>Phone Number</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td>EASY Address</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td>Product</td>\n';
                    //basketHeaderRow = basketHeaderRow + '<td>Date</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td align="right">Monthly</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td align="right">Quarterly</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td align="right">Yearly</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td align="right">One-Off</td>\n';
                    basketHeaderRow = basketHeaderRow + '<td class="iconColumn"></td>\n';
                    basketHeaderRow = basketHeaderRow + '<td class="iconColumn"></td>\n';
                    //basketHeaderRow = basketHeaderRow + '<td>Commercial Approval</td>\n';
                    //basketHeaderRow = basketHeaderRow + '<td>Technical Approval</td>\n';
                    if ('{!$Profile.Name}' == 'System Administrator') {
                        basketHeaderRow = basketHeaderRow + '<td>Request Details</td>\n';
                    }
                    basketHeaderRow = basketHeaderRow + '</tr>\n';
                    $('#productBasketContentHeader').append(basketHeaderRow);
                    // Setup a listener to wait for post messages from the iframe to initiate
                    // basket refresh
                    // due to IE8 compatibilty support
                    //$(window).bind('message', refreshFromConfigurator, false);
                    if (!window.addEventListener) {
                        window.attachEvent('onmessage', refreshFromConfigurator);
                    } else {
                        window.addEventListener('message', refreshFromConfigurator, false);
                    }
                                       
                    // show current basket content
                    refreshBasketContent();
                    // set list of availble offers for first product category
                    getHighLevelOffersForCategory();
                    // attach event handlers on availability checks
                    $('#avblChkAll').on('click', function() {
                        // perform select/unselect all
                        selectDeselectAll('avblChks', 'avblChkAll', 'selectMe');
                        // show/hide EAD request type based on checkbox state
                        // separated from select all becaues select all is generic
                        showHideEADRequestType($('#avCheckEAD'));
                    });
                    $('#avCheckEAD').on('change', function() {
                        showHideEADRequestType($(this));
                    });
                    
                    // attach select all auto check
                    $('.selectMe').on('change', function() {
                        // if all enabled checks are selected check Select All, same for disable
                        var setChkAll = true;
                        $('.selectMe').each(function () {
                            if (!$(this).prop('disabled') && !$(this).prop('checked')){
                                setChkAll = false;
                                return false;
                            }
                        });
                        $('#avblChkAll').prop('checked', setChkAll);
                    });
                    
                    // mark required elements
                    addRequiredFieldMarker($('#addDetailedProductTD'));
                    addRequiredFieldMarker($('#postCodeTD'));
                    addRequiredFieldMarker($('#availableAddressListTD'));
                    addRequiredFieldMarker($('#highLevelProductCategoriesTD'));
                    addRequiredFieldMarker($('#highLevelOffersTD'));
                    // get list of callout details mapping used to display callout details information
                    // not used as of 103999
                    // Visualforce.remoting.Manager.invokeAction(
                    //        '{!$RemoteAction.CSBasketBuilderEController.getJSONConfigurationMapperFields}',
                    //        handleGetConfigurationMapperFieldsResponse,
                    //        {escape: false}
                    //    );
                    // get list of product categories and display them on the page
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.getProductCategoryList}',
                            handleGetProductCategoryListResponse,
                            {escape: false}
                        );
                    // initialize billing setup information
                    var bilSetupCell = $('#p\\:b\\:BasketHeaderSection\\:billingDetails\\:billingDetailsSetupEdit\\:billingSetup').parent();
                    var billSetButtonsHTML = '<input type="button" value="Change Billing Setup" id="changeBillingSetup" onclick="enableBillingSetupChange()" class="btn" style="margin-left:25px;" />\n';
                    billSetButtonsHTML += '<input type="button" value="Save Changes" id="saveBillingSetup" onclick="saveBillingSetupChange()" class="btn" style="margin-left:25px;" />\n';
                    billSetButtonsHTML += '<input type="button" value="Cancel Edit" id="cancelEditBillingSetup" onclick="cancelBillingSetupEdit()" class="btn" />\n';
                    bilSetupCell.append(billSetButtonsHTML);
                    billingSetupChangeDisabled = false;
                    enableBillingSetupChange();
                    // disable buttons on product basket if basket is read only
                    // for partners basket content actions are disabled in refreshBasketContent
                    disableButtonsBasketReadOnly({!prodBasketReadOnly});
                
                    // add required field marker for inline editable field contracting company 103956
                    // if additional field appear make this a function, not happy about this solution but there is no other
                    // way with custom inline edit and required fields
                    // this is because ileinneredit div is created first time user navigates to the field and initates edit
                    $('#p_b_BasketHeaderSection_generalDetails_contractingCompany_ilecell').on('DOMNodeInserted',
                        function(event) {
                            if ($(event.target).is('#p_b_BasketHeaderSection_generalDetails_contractingCompany_ileinneredit')) {
                                $(event.target).addClass('requiredFieldIleOverride');
                            }
                        }
                    );
                }
                // disable hit enter key on HTML input elements
                $('input').keypress(function (event) {
                    //Deterime where our character code is coming from within the event
                    var charCode = event.charCode || event.keyCode;
                    if (charCode  == 13) { //Enter key's keycode
                        return false;
                    }
                });
                // display billing setup information based on selected data
                var basketHeaderId = '{!cscfga__Product_Basket__c.Id}' == '' ? 'NewBasketHeaderSection' : 'BasketHeaderSection';
                var idPrefix = 'p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:newBillingAccountEdit\\:';
                addRequiredFieldMarker($('#' + idPrefix + 'BCLookup').parent());
                addRequiredFieldMarker($('#' + idPrefix + 'BABuildingNameNumber').parent());
                addRequiredFieldMarker($('#' + idPrefix + 'BAPostcode').parent());
                addRequiredFieldMarker($('#' + idPrefix + 'BCPaymentMethod').parent());
                addRequiredFieldMarker($('#' + idPrefix + 'bankAccNumber').parent());
                // tweak height off required field marker due to PCA plugin that add additional elements to the table cell -> breaks table layout
                $('#' + idPrefix + 'bankAccNumber').parent().parent().css('height', '21px');
                addRequiredFieldMarker($('#' + idPrefix + 'bankSortCode').parent());
                
                idPrefix = 'p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:unknownBillingStructureEdit\\:';
                addRequiredFieldMarker($('#' + idPrefix + 'complexBillingStructureArea').parent());
                
                idPrefix = 'p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:existingBillingAccountEdit\\:';
                addRequiredFieldMarker($('#' + idPrefix + 'basketBillingAccount').parent());
                // disable non editable fields
                $('.notEditable').prop('disabled', true);
                changeBillingSetupOption();
                changePaymentMethod();
                
                getPathPrefix();
            });
            
            function refreshFromConfigurator(event) {
                window.console.log('-----------------> returning form configurator' + event.data);
                if (event.data == 'refreshBasketBuilderScreen') {
                    hideOverlayedItem();
                    // function update product configuration request record
                    // and refreshes product basket content
                    updateProdConfReq(gProdConfReqId);
                }
            }
            
            // global variables
            //id for callout interval check, used to clear interval when required
            var checkIntervalId;
            // list of acitve callout requests for avaliabilty checks
            var activeCalloutChecks = {};
            // interval time for callout status check, in miliseconds
            var checkInterval = 5000;
            //id for clone interval check, used to clear interval when required
            var cloneIntervalId;
            // list of active clone batch jobs for product configuration requests
            var activeCloneJobs = {};
            // interval time for callout status check, in miliseconds
            var cloneInterval = 5000;
            // global holder of addresses returned from address matching web service
            var JSONAddressList;
            // global holder of dates returned from the date check web service (a map of PCR to the list of dates)
            var JSONDatesMap = {};
            // holders of product configuration request Id and product configuration Id
            // during configuration update on the edit IFrame
            var gProdConfReqId;
            // object holds information which callout detailed information to show on Callout results pop-up dialog
            var calloutFieldMapper = {};
            // array holds all prod. configuration request attachments, used to render attachment details on user request
            var gConfReqAtt = [];
            // array holds all EAD product configuration request attachment Ids used when to map values when selecting an offer
            var gConfReqEADAtt = [];
            // array holds details about product configuration requests used in additional processing
            // TODO: move gConfReqAtt and gConfReqEADAtt into this array as objects because all are information about a single product configuration request
            var gConfReqDets =  [];
            // array holds required avaliability checks grouped by product categories
            var gReqCallouts = [];
            // information whether change/edit of billing setup information is allowed
            var billingSetupChangeDisabled;
            // object holds current information about billing setup that will be restored if user cancels edit of billing setup
            var currentBillingSetup = {};
            // object holds information received from Request Approval action that needs to be rendered on the screen
            var gAppProcessMsgs = {};
            // global holder of PCA validation result during billing setup information save
            var gpcaBankAccountValidation = {};
            // site prefix used in URLs
            var sitePrefix = '/apex';
            // the list of selected sites in the advanced clone overlay
            var currentAddressSitesList = ['-- no sites selected --'];
            
            
            
            /**
             * [ZD]
             *
             */
            function switchAddressInput(elem) {
                if (elem.is(":checked")) {
                    $("#inputBTAddress").addClass("hidden");
                    $("#searchAddressFields").removeClass("hidden");
                    $("#selectedBTAddress").removeClass("hidden");
                    $("#postCode").removeClass("hidden");
                    $("#postCode").val("")
                }
                else {
                    $("#inputBTAddress").removeClass("hidden");
                    $("#searchAddressFields").addClass("hidden");
                    $("#selectedBTAddress").addClass("hidden");
                    $("#postCode").addClass("hidden");
                    $("#postCode").val("Manual input")
                }
            }
            
            
            /**
             * function disables buttons for product basket if product basket is readOnly
             *
             */
            function disableButtonsBasketReadOnly(pbReadOnly) {
                if (pbReadOnly) {
                    var buttons = $('#manageBasketDeleteSelected, #manageRequestApproval, #manageBasketSynchronizeWithOpportunity, #AddToBasket, #detailedHighLevelBtn, #changeSelOffer, #cloneSelOffer');
                    // bug-103251 #issueAdrKey
                    // and 103248 all removed due to change required to enter billing details on Progress Order
                    // buttons = buttons.add('#changeBillingSetup, #cancelEditBillingSetup, #saveBillingSetup');
                    // disable partner specific buttons
                    if ({!not IsStandardUser}){
                        buttons = buttons.add('#submitTheOrderButton, #save');
                    }
                    buttons.removeClass('btn');
                    buttons.addClass('btnDisabled');
                    buttons.prop('disabled', true);
                }
            }
            
            
            /**
             * function disables action within basket content
             *
             */
            function disableBasketContentActions(pbReadOnly) {
                if (pbReadOnly) {
                    // disable edit configuration
                    $('.editProdConfImg').removeProp('onclick');
                    // disable avOffersImg
                    $('.avOffersImg').removeProp('onclick');
                    // disable delete attachment
                    $('.delAttachmentImg').removeProp('onclick');
                    // disable buttons in basket content
                    var buttons = $('.attUploadBtn');
                    buttons.removeClass('btn');
                    buttons.addClass('btnDisabled');
                    buttons.prop('disabled', true);
                }
            }
            
            /**
             * function fills category select lists
             *
             * @param result JSON list with product category information
             * @param event
             */
            function handleGetProductCategoryListResponse (result, event) {
                window.console.log('Entered handleGetProductCategoryListResponse');
                window.console.log(result);
                if (event.type === 'exception') {
                    growlNow('Product category list fetch exception: ' + event.message);
                } else {
                    var prodCat = JSON.parse(result);
                    window.console.log(prodCat);
                    // first options is default Please select
                    var detOptionsHTML = '<option value=""> -- Please select -- </option>';
                    var highLvlOptionsHTML = '<option value=""> -- Please select -- </option>';
                    for (var i = 0; i < prodCat.length; i++) {
                        if (prodCat[i].hasDetailedLevelProducts == 'true') {
                            detOptionsHTML = detOptionsHTML + '<option value="' + prodCat[i].id + '">' + prodCat[i].name + '</option>';
                            // add avaliability checks to global object holder used to render Add product to Basket section correctly
                            gReqCallouts[prodCat[i].name] = prodCat[i].reqCallouts;
                        }
                        //
                        if (prodCat[i].hasHighLevelProducts == 'true') {
                            highLvlOptionsHTML = highLvlOptionsHTML + '<option value="' + prodCat[i].id + '">' + prodCat[i].name + '</option>';
                        }
                    }
                    
                    // attach options to the select lists
                    $('#addDetailedProduct').children().remove();
                    $('#addDetailedProduct').append(detOptionsHTML);
                    $('#highLevelProductCategories').children().remove();
                    $('#highLevelProductCategories').append(highLvlOptionsHTML);
                }
                window.console.log('Leaving handleGetProductCategoryListResponse');
            }
            
            /**
             * function returns list of callout fields that can be displayed to the end user on callout details pop up
             *
             * @param result JSON list containing fields form custom setting
             * @param event
             */
            function handleGetConfigurationMapperFieldsResponse (result, event) {
                if (event.type === 'exception') {
                    growlNow('Callout map list' + event.message);
                } else {
                    calloutFieldMapper = JSON.parse(result);
                }
            }
                   
            /**
             * function adds product to basket via remote action method addProductToBasket
             *
             */
            function addToBasket(){
                // [ZD]
                var selectedCategory = $('#addDetailedProduct option:selected').text();
                if ((gReqCallouts[selectedCategory] != null) && ($("#hiddenParam1").val() == undefined || $("#hiddenParam1").val() == "")) {
                    growlNow("Address check is missing. Please invoke a callout or manually input the value.");
                    return;
                }
                
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                
                var mandFieldsMissing = false;
                var mandCheck = false;
                                              
                var product = {};
                // for detailed products
                if (document.getElementById('detailedHighLevelBtn').value == 'Switch to High Level Products'){
                    //product["productType"] = 'DLP';
                    product["productCategoryId"] = $('#addDetailedProduct').val();
                    //product["postCode"] = $('#postCode').val();
                    product["postCode"] = $('#postalCodeInput').val();
                    // validate phone number format, stop if format is invalid
                    /// [ZD]
                    //product["phoneNumber"] = $('#osreId').val().trim(); // [ZD]
                    product["addressid"] = $('#osreId').val().trim(); // [ZD]
                    product["additionalFields"] = {}; // [ZD]
                    product["additionalFields"]["hiddenParam1"] = $('#hiddenParam1').val().trim(); // [ZD]
                    product["additionalFields"]["hiddenParam2"] = $('#hiddenParam2').val().trim(); // [ZD]
                    product["additionalFields"]["selectedAddressDisplay"] = defineText($('#selectedAddressDisplay').text()); // [ZD]
                    product["additionalFields"]["desiredDate"] = '';//$('#desiredDateInput').val().trim(); // [ZD]

                    product["productCategoryId"] = $('#addDetailedProduct').val();
                    product["productBasketId"] = '{!cscfga__Product_Basket__c.Id}';
                    product["quantity"] = $('#quantityDLP').val(); // vidi za highLevelProduct
                    
                    // add avaliabilty check requests as input parameters to the addToBasket method
                    product["avCheckServices"] = {}
                    <apex:repeat value="{!allServiceNames}" var="calloutService">
                    if ($('#avCheck{!calloutService}').prop('checked')) {
                        product["avCheckServices"]["{!calloutService}"] = 'Y'; // Yes
                        mandCheck = true;
                    }
                    </apex:repeat>
                    
                    window.console.log(product["productCategoryId"]);
                    window.console.log(product["productBasketId"]);
                    window.console.log(product["quantity"]);
                    //growlNow(product["quantity"]+ ' ' +product["productCategoryId"]);
                } else {
                    if ($('#highLevelOffers').val() == null) {
                        growlNow('For High Level products offer is mandatory field.');
                       mandFieldsMissing = true;
                    }
                    if ($('#highLevelOffers').val() == '-1') {
                       growlNow('No offers available for selected product category!');
                       mandFieldsMissing = true;
                    }
                    //product["productType"] = 'HLP';
                    product["productCategoryId"] = $('#highLevelProductCategories').val();
                    product["offerId"] = $('#highLevelOffers').val();
                    product["productBasketId"] = '{!cscfga__Product_Basket__c.Id}';
                    product["quantity"] = $('#quantityHLP').val();
                }
                
                /* check if all required values have been supplied */
                if (product["quantity"] == '') {
                    growlNow('Quantity is required field.');
                    mandFieldsMissing = true;
                }
                if (product["productCategoryId"] == '') {
                    growlNow('Please select Product Category.');
                    mandFieldsMissing = true;
                }
                /*if ((product["postCode"] == '') && mandCheck) {
                    growlNow('Please provide value for Postcode.');
                    mandFieldsMissing = true;
                }
                if ((product["BTAddress"] == null) && mandCheck) {
                    growlNow('Please select EASY address.');
                    mandFieldsMissing = true;
                }*/

                if (mandFieldsMissing) {
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    return;
                }
                
                window.console.log(JSON.stringify(product));
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.addToBasket}',
                            JSON.stringify(product),
                            handleAddToBasketResponse,
                            {escape: false}
                        );
            }

            /**
             * function handles addToBasket response and refreshes basket content
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleAddToBasketResponse(result, event){
                if (event.type === 'exception') {
                    growlNow(event.message);
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                } else {
                    var resultJSON = JSON.parse(result);
                    var retMessage;
                    // 103975 if exception happened when adding high level product show exception message
                    switch (resultJSON.status) {
                        case 'success':
                            retMessage = resultJSON.message;
                            if (resultJSON.activeCallouts !== undefined) {
                                window.console.log('list of callouts to add:' + result);
                                addToCalloutCheckList(resultJSON.activeCallouts);
                            }
                            break;
                        case 'error':
                            retMessage = resultJSON.errorMessage;
                            break;
                    }
                    refreshBasketContent();
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    growlNow(retMessage);
                }
            }
            
            /**
             * function invokes remote action that update product configuration request record
             * based on changes on product configuration
             *
             * @param prodConfReq
             * @param prodConfId
             *
             */
            function updateProdConfReq(prodConfReqId){
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                // reset global holders
                gProdConfReqId = null;
                window.console.log('updating...' + prodConfReqId);
               
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.updateProdConfReq}',
                            prodConfReqId,
                            handleUpdateProdConfReqResponse,
                            {escape: false}
                        );
            }
            
            /**
             * function handles updateProdConfReq response and refreshes basket content
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleUpdateProdConfReqResponse(result, event){
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
                                
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    refreshBasketContent();
                }
            }
            
            /**
             * function invokes remote action that update product configuration request record
             * based on changes on product configuration
             *
             * @param prodConfReq
             * @param prodConfId
             *
             */
            /*function cloneProductsOverlay(){
                // only one record can be processed at the time
                if ($('.selProdConfReq:checked').length != 1) {
                    growlNow('Please select single row to initiate the clone process!');
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    return;
                }
                
                // if conditions are satisfied show list of available offers
                var prodConfReqId;
                $('.selProdConfReq:checked').each(function () {
                    prodConfReqId = $(this).parent().parent().prop('id');
                });
                
                var aaDiv;
                
                aaTable = '<table class="list" style="width:100%;border-spacing:0; border-collapse:collapse;"><tr style="height:27px;" class="BBTableHeader">';
                aaTable += '<td>Quantity</td><td>Action</td>';
                
                aaTable += '<tr class="selectAddressRow">';
                aaTable += '<td>' + '<input type="text" name="cloneOverlayQuantity" id="cloneOverlayQuantity" />' + '</td>\n';
                aaTable += '<td>' + '<a href="#" onclick="cloneProducts(\'' + prodConfReqId + '\', document.getElementById(\'cloneOverlayQuantity\').value)">Clone</a>' + '</td>\n';
                aaTable += '</tr>';
                
                aaTable = aaTable + '</table>';
                
                aaDiv = '<div>\n';
                aaDiv = aaDiv + '<div class="closeDivImg"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'close.png')}" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>';
                aaDiv = aaDiv + '<div class="overflowTableWrap" style="border:1px solid #ececec; background-color:#ffffff">';
                aaDiv = aaDiv + aaTable + '</div></div>';
                
                showOverlayedItem(aaDiv, '.overflowTableWrap', 45);
                $("#processing_overlay").click(function () {
                    hideOverlayedItem();
                });
            }*/
            function cloneProductsOverlay(){
				// only one record can be processed at a time
				if ($('.selProdConfReq:checked').length != 1) {
					growlNow('Please select a single row to initiate the clone process!');
					$('.manageBasketProducts').unblock();
					$('.addProductToBasket').unblock();
					return;
				}
				
				var prodConfReqId;
				$('.selProdConfReq:checked').each(function () {
					prodConfReqId = $(this).parent().parent().prop('id');
				});
				
				// tabs table
				var tabsTable;
				tabsTable = '<table class="list" style="width: 100%;border-spacing:0; border-collapse:collapse;">';
				tabsTable += '<tr style="height:27px;" class="BBTableHeader">';
				tabsTable += '<td id="cloneOverlaySimpleCloneTab" style="background-color: #dcdcdc;" onclick="cloneOverlayToggleForm(0)">Simple clone</td>';
				tabsTable += '<td id="cloneOverlayAdvancedCloneTab" onclick="cloneOverlayToggleForm(1)">Advanced clone</td>';
				tabsTable += '</tr>';
				tabsTable += '<tr style="height:3px;" class="BBTableHeader">';
				tabsTable += '<td colspan="2" style="background-color: #dcdcdc;"></td>';
				tabsTable += '</tr>';
				tabsTable += '</table>';
				tabsTable += '<p></p>';
				
				// simple-clone table
				var cloneTable;
				
				cloneTable = '<table class="list" style="width:100%;border-spacing:0; border-collapse:collapse;" id="cloneOverlaySimpleCloneTable">';
				cloneTable += '<tr style="height:27px;" class="BBTableHeader">';
				
				// header row
				cloneTable += '<td>Quantity</td><td>Action</td>';
				cloneTable += '</tr>';
				
				// input param (quantity) and action button (clone link)
				cloneTable += '<tr class="selectAddressRow">';
				cloneTable += '<td>' + '<input type="text" name="cloneOverlayQuantity" id="cloneOverlayQuantity" />' + '</td>\n';
				cloneTable += '<td>' + '<a href="#" onclick="cloneProducts(\'' + prodConfReqId + '\', document.getElementById(\'cloneOverlayQuantity\').value)">Clone</a>' + '</td>\n';
				cloneTable += '</tr>';
				// close table
				cloneTable += '</table>';
				
				// advanced-clone table
				var advancedCloneDiv = cloneOverlayGenerateAdvancedClone();
				
				// main overlay div
				var cloneDiv;
				cloneDiv = '<div>\n';
				//cloneDiv = cloneDiv + '<div class="closeDivImg"><img src="/resource/1414949456000/BasketBuilderIcons/close.png" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>';
				cloneDiv = cloneDiv + '<div class="closeDivImg"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'close.png')}" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>';
				cloneDiv = cloneDiv + '<div class="overflowTableWrap" style="border:1px solid #ececec; background-color:#ffffff">';
				cloneDiv = cloneDiv + tabsTable + cloneTable + advancedCloneDiv + '</div></div>';
				
				showOverlayedItem(cloneDiv, '.overflowTableWrap', 45);
				$("#processing_overlay").click(function () {
					hideOverlayedItem();
				});
			}
			
			function cloneOverlayGenerateAdvancedClone () {
				var advancedCloneDiv;
				advancedCloneDiv = '<div id="cloneOverlayAdvancedCloneDiv" style="display:none">';
				advancedCloneDiv += '<h2>The selected product will be cloned to the following sites:</h2>';
				
				advancedCloneDiv += '<p>';
				for (i = 0; i < currentAddressSitesList.length; i++) {
					var removeLink = '';
					if (!(currentAddressSitesList.length == 1 && currentAddressSitesList[0] == '-- no sites selected --')) {
						removeLink = '<a onclick="cloneOverlayRemoveSelectedSite(\'' + currentAddressSitesList[i] + '\')">[X] </a> ';
					}
					
					advancedCloneDiv += '<span>' + currentAddressSitesList[i] + removeLink + '<\span> ';
				}
				
				var numberOfSelectedSites = currentAddressSitesList.length;
				if (currentAddressSitesList.length == 1 && currentAddressSitesList[0] == '-- no sites selected --') {
					numberOfSelectedSites = 0;
				}
				var plural = 's';
				if (numberOfSelectedSites % 100 == 1 || numberOfSelectedSites % 100 == 11) {
					plural = '';
				}
				var cloneButtonText = 'Clone to ' + numberOfSelectedSites + ' site' + plural;
				
				var disableCloneButton = '';
				if (numberOfSelectedSites == 0) {
					disableCloneButton = ' disabled="disabled" ';
				}
				
				advancedCloneDiv += '</p>';
				advancedCloneDiv += '<p><input type="button" id="cloneOverlayInitiateCloning" value="' + cloneButtonText + '" onClick="cloneOverlayInitiateCloning();" class="btn" ' + disableCloneButton + ' /></p>';
				advancedCloneDiv += '<br />';
				
				advancedCloneDiv += '<hr />';
				
				advancedCloneDiv += '<div style="text-align:left;">';
				advancedCloneDiv += '<h2>Add additional sites:</h2>';
				advancedCloneDiv += '<table id="cloneOverlaySearchAddressFields">';
				advancedCloneDiv += '<tr><td>City</td><td><input type="text" id="cloneOverlayCityInput" /></td></tr>';
				advancedCloneDiv += '<tr><td>Postal code</td><td><input type="text" id="cloneOverlayPostalCodeInput" /></td></tr>';
				advancedCloneDiv += '<tr><td>Street name</td><td><input type="text" id="cloneOverlayStreetNameInput" /></td></tr>';
				advancedCloneDiv += '<tr><td>Street number</td><td><input type="text" id="cloneOverlayStreetNumberInput" /></td></tr>';
				advancedCloneDiv += '</table>';
				advancedCloneDiv += '<input type="button" id="cloneOverlayInvokeAddressCheck" value="Get Addresses" onClick="cloneOverlayGetAvailableAddresses();" class="btn"/></p>';
				
				advancedCloneDiv += '<br /><br />';
				advancedCloneDiv += '<div id="cloneOverlayAddressSearchResultsDiv" style="display: none;">';
				advancedCloneDiv += '<h2>Search results:</h2><br /><br />';
				advancedCloneDiv += '<p><input type="button" id="cloneOverlayAddSelectedSitesTop" value="Add selected sites" onClick="cloneOverlayAddSelectedSites();" class="btn"/></p>';
				
				advancedCloneDiv += '<div class="overflowTableWrap2" id="cloneOverlayAddressListTable" style="border: 1px solid rgb(236, 236, 236); background-color: rgb(255, 255, 255);">';
				advancedCloneDiv += '</div>';
				advancedCloneDiv += '<p><input type="button" id="cloneOverlayAddSelectedSitesBottom" value="Add selected sites" onClick="cloneOverlayAddSelectedSites();" class="btn"/></p>';
				
				advancedCloneDiv += '</div>';
				advancedCloneDiv += '</div>';
				return advancedCloneDiv;
			}
			
			function cloneOverlayToggleForm (formChoice) {
				if (formChoice == 0) {
					$('#cloneOverlaySimpleCloneTab').css('background-color', '#dcdcdc');
					$('#cloneOverlayAdvancedCloneTab').css('background-color', '#ececec');
					
					$('#cloneOverlaySimpleCloneTable').css('display', '');
					$('#cloneOverlayAdvancedCloneDiv').css('display', 'none');
				}
				if (formChoice == 1) {
					$('#cloneOverlaySimpleCloneTab').css('background-color', '#ececec');
					$('#cloneOverlayAdvancedCloneTab').css('background-color', '#dcdcdc');
					
					$('#cloneOverlaySimpleCloneTable').css('display', 'none');
					$('#cloneOverlayAdvancedCloneDiv').css('display', '');
					
				}
			}
			
			function cloneOverlayAddSelectedSites () {
				$('#cloneOverlayAddressSearchResultsDiv').css('display', 'none');
				
				var checkedBoxes = $('.cloneOverlayAddressSelectionCheckbox:checked');
				
				if (checkedBoxes.length > 0 && currentAddressSitesList.length == 1 && currentAddressSitesList[0] == '-- no sites selected --') {
					currentAddressSitesList = [];
				}
				for (i = 0; i < checkedBoxes.length; i++) {
					if ($.inArray(checkedBoxes[i].value, currentAddressSitesList) == -1) {
						currentAddressSitesList.push(checkedBoxes[i].value);
					}
				}
				
				cloneProductsOverlay();
				cloneOverlayToggleForm(1);
			}
			
			function cloneOverlayRemoveSelectedSite (siteToRemove) {
				currentAddressSitesList.splice($.inArray(siteToRemove, currentAddressSitesList), 1);
				
				if (currentAddressSitesList.length == 0) {
					currentAddressSitesList.push('-- no sites selected --');
				}
				
				cloneProductsOverlay();
				cloneOverlayToggleForm(1);
			}
			
			function cloneOverlayInitiateCloning () {
				hideOverlayedItem();
				
				blockScreenElement('.manageBasketProducts');
				blockScreenElement('.addProductToBasket');
				
				var prodConfReqId;
				$('.selProdConfReq:checked').each(function () {
					prodConfReqId = $(this).parent().parent().prop('id');
				});
				
				var payload = {};
				payload['pcrId'] = prodConfReqId;
				payload['sitesList'] = currentAddressSitesList;
				
				currentAddressSitesList = ['-- no sites selected --'];
				
				Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.CSBasketBuilderEController.cloneAdvanced}',
							JSON.stringify(payload),
							handleCloneAdvanced,
							{escape: false}
						);
			}
			
			/**
			 * handles advanced cloning results
			 */
			function handleCloneAdvanced (result, event) {
				if (event.type === 'exception') {
					growlNow(event.message);
					$('.manageBasketProducts').unblock();
					$('.addProductToBasket').unblock();
				} else {
					var JSONResponse = JSON.parse(result);
					activeCloneJobs[JSONResponse.pcr] = JSONResponse.batch;
					$('.manageBasketProducts').unblock();
					$('.addProductToBasket').unblock();
					
					getCloneRequestStatus();
				}
			}
			
			function cloneProducts(prodConfReqId, quantity){
                hideOverlayedItem();
                
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                
                // reset global holders
                gProdConfReqId = null;
                window.console.log('cloning...' + prodConfReqId);
               
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.cloneInBatch}',
                            prodConfReqId,
                            quantity,
                            handleCloneInBatch,
                            {escape: false}
                        );
            }
            
            /**
             * function handles updateProdConfReq response and refreshes basket content
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleCloneInBatch(result, event){
                window.console.log('handle cloning...' + result);
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
                                
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    var JSONResponse = JSON.parse(result);
                    activeCloneJobs[JSONResponse.pcr] = JSONResponse.batch;
                    
                    getCloneRequestStatus();
                }
            }
            
            /**
             * function invokes remote action that deletes products from basket. If prodConfReqId is null
             * then all marked prod. conf. requests are sent to the controller, otherwise only one is sent
             * to the deleteing method
             *
             * @param prodConfReqId product configuration request that is marked for delete
             */
            function deleteFromBasket(prodConfReqId){
                var products = {};
                var i = 0;
                
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                
                //if single product marked for delete delete only that product
                if (prodConfReqId != null) {
                    products[0] = prodConfReqId;
                } else {
                    // iterate through all configurations and fetch those marked for delete
                    //
                    window.console.log($('.selProdConfReq').length);
                    $('.selProdConfReq').each(function () {
                        if ($(this).prop('checked')){
                            products[i++] = $(this).parent().parent().prop('id');
                        }
                    });
                }
                window.console.log(JSON.stringify(products));
                if (!$.isEmptyObject(products)) {
                    // delete products form activeCalloutChecks list
                    deleteFromCalloutCheckList(products);
                    
                    // delete products from product basket
                    Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.CSBasketBuilderEController.deleteFromBasket}',
                                JSON.stringify(products),
                                handleDeleteFromBasketResponse,
                                {escape: false}
                            );
                       // for (j in products){
                       //     window.console.log('id >> ' + products[j]);
                       // }
                } else {
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    growlNow('Nothing selected');
                }
            }
                 
            /**
             * function handles deleteFromBasket response and refreshes basket content
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleDeleteFromBasketResponse(result, event){
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
                
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    refreshBasketContent();
                    // refreshProductBasket();
                    
                    growlNow('Products deleted!');
                }
            }
            
            /**
             * function refreshes products in the basket with screen block
             *
             */
            function refreshBasketContentBlocking() {
                // block elements
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                // refresh
                refreshBasketContent();
                // unblock
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
            }

            /**
             * function refreshes products in the basket, invoked as a result of add/delete/select actions
             *
             */
            function refreshBasketContent() {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CSBasketBuilderEController.refreshBasketContent}',
                    '{!cscfga__Product_Basket__c.Id}',
                    handleRefreshBasketContentResponse,
                    {escape: false}
                );
            }

            /**
             * function handles Remote Action reponse from server for refreshBasketContent
             *
             * @param result holds current product basket content
             * @param event holds infromation about returning event
             */
            function handleRefreshBasketContentResponse(result, event){
                var JSONBasket = JSON.parse(result);
                var basketContentHTML = '';
                var lineItemsHTML;
                var prodConfAttHTML;
                var prodConfAddInfoHTML;
                var prodConfActionsHTML;
                var prodConfMsgsHTML;
                var prodConfDetsAction;
                var prodConfDetsActionTitle;
                var prodConfDetsId;
                var offerCell;
                var statusCell;
                var addressCell;
                var avCheckStatusCell;
                var avCheckStatusCellId;
                var BTAdrIds = [];
                var BTAdrId;
                var offerId;
                var offerImgId;
                var refreshCalloutCheck = {};
                var prodConfStatusIcon;
                var pbReadOnly = JSONBasket.isBasketReadOnly;

                window.console.log('refreshing basket content...');
                for (var i = 0; i < JSONBasket.products.length; i++){
                    lineItemsHTML = '';
                    prodConfAttHTML = '';
                    prodConfAddInfoHTML = '';
                    prodConfActionsHTML = '';
                    prodConfMsgsHTML = '';
                    statusCell = '';
                    offerCell = '';
                    addressCell = '';
                    
                    // put additional information about product configuration request into gConfReqDets
                    gConfReqDets[JSONBasket.products[i]["productConfReqId"]] = {};
                    gConfReqDets[JSONBasket.products[i]["productConfReqId"]].productCategoryId = JSONBasket.products[i]["productCategoryId"];
                    gConfReqDets[JSONBasket.products[i]["productConfReqId"]].isHighLevelProduct = JSONBasket.products[i]["productType"] == 'HLP' ? true : false;
                    if (JSONBasket.products[i]["prodConfId"] !== undefined) {
                        gConfReqDets[JSONBasket.products[i]["productConfReqId"]].prodConfId = JSONBasket.products[i]["prodConfId"];
                    }
                    // if EADattachmentId exists add it to the global list used later in addOfferToConfigReq
                    if (JSONBasket.products[i]["EADAttachment"] !== undefined) {
                        gConfReqEADAtt[JSONBasket.products[i]["productConfReqId"]] = JSONBasket.products[i]["EADAttachment"];
                        window.console.log('EAD Att Id: ');
                        window.console.log(JSONBasket.products[i]["EADAttachment"]);
                    }
                                        
                    // display prod. conf additional information (line items and attachments
                    if (JSONBasket.products[i]["prodConfId"] !== undefined) {
                        prodConfDetsId = getProdConfDetsId(JSONBasket.products[i]["productConfReqId"]);
                        prodConfDetsAction = 'showHideProdConfDets(\'' + prodConfDetsId + '\');';
                        prodConfDetsActionTitle = 'Expand';
                        // attach product configuration additional information to the screen
                        for (var li = 0; li < JSONBasket.products[i]["lineItems"].length; li++) {
                            //window.console.log(li+': '+JSONBasket.products[i]["lineItems"][li]);
                            lineItemsHTML = lineItemsHTML + '<tr class="lineItemRow">\n';
                            lineItemsHTML = lineItemsHTML + '<td  style="padding-left:25px;">' + JSONBasket.products[i]["lineItems"][li].description + '</td>\n';
                            lineItemsHTML = lineItemsHTML + '<td align="right" style="padding-left:80px">' + formatPound(JSONBasket.products[i]["lineItems"][li].price)
                                            + defineText(JSONBasket.products[i]["lineItems"][li].referenceValue) + '</td>\n';
                            lineItemsHTML = lineItemsHTML + '</tr>\n';
                        }
                    
                        if (lineItemsHTML.length != 0){
                            lineItemsHTML = '<table cellspacing="0" id="lineItemsTable"><tr><td colspan="2" class="lineItemsHeader">Line items:</td></tr>\n' + lineItemsHTML + '</table>\n';
                        }
                        // always display attachment list (if attachments do not exist display file upload row
                        prodConfAttHTML = appendAttachmentList(JSONBasket.products[i]["prodConfId"], JSONBasket.products[i]["prodConfAtts"]) + '\n';
                        // if required display Approval Process history
                        // window.console.log(JSONBasket.products[i]["commercialApprovalStatus"]);
                        // window.console.log(JSONBasket.products[i]["technicalApprovalStatus"]);
                        if (JSONBasket.products[i]["commercialApprovalStatus"].length > 0
                            || JSONBasket.products[i]["technicalApprovalStatus"].length > 0) {
                            prodConfActionsHTML = '<div class="prodConfActions">';
                            prodConfActionsHTML = prodConfActionsHTML + '<input type="button" class="btn" value="Approval History" onclick="showApprovalHistory(\'' + JSONBasket.products[i]["productConfReqId"] + '\')" />';
                            prodConfActionsHTML = prodConfActionsHTML + '</div>\n';
                        }
                        // display additional comments input field for commerical approvals(only if commerical approval is set to required Bug 103953
                        // 104088 if both approvals are required technical is required first (don't show comment box until technical is processed
                        if (JSONBasket.products[i]["commercialApprovalStatus"] == 'Required' && JSONBasket.products[i]["technicalApprovalStatus"] != 'Required') {
                            prodConfActionsHTML = prodConfActionsHTML + '<div class="prodConfActions">\n';
                            prodConfActionsHTML = prodConfActionsHTML + '<div class="errorText">Please provide reasons for commercial approval request</div>\n';
                            prodConfActionsHTML = prodConfActionsHTML + '<textarea rows="4" cols="70" id="' + getCommericalApprovalCommentId(JSONBasket.products[i]["productConfReqId"]) + '" style="border:1px solid #c00;"></textarea>';
                            prodConfActionsHTML = prodConfActionsHTML + '</div>\n';
                            prodConfActionsHTML = prodConfActionsHTML + '</div>\n';
                        }
                        // display additional information received from Request Approval action
                        if (gAppProcessMsgs[JSONBasket.products[i]["productConfReqId"]] !== undefined) {
                            window.console.log(gAppProcessMsgs[JSONBasket.products[i]["productConfReqId"]]);
                            // expand product configuration and add message
                            prodConfMsgsHTML = '<div class="errorText" id="pbProdConfMsgs">Error: ';
                            prodConfMsgsHTML = prodConfMsgsHTML + gAppProcessMsgs[JSONBasket.products[i]["productConfReqId"]];
                            prodConfMsgsHTML = prodConfMsgsHTML + '</div>\n';
                        }
                        prodConfAddInfoHTML = '<tr id="' + prodConfDetsId + '" class="hidden"><td colspan="17">' + prodConfActionsHTML + prodConfMsgsHTML + lineItemsHTML + prodConfAttHTML + '</td></tr> \n';
                    } else {
                        prodConfDetsId = null;
                        prodConfDetsAction = 'null;';
                        prodConfDetsActionTitle = 'No line items available.';
                    }
                    // if prod conf. is valid then display blue tick, else display yellow exclamation as signal that something is missing
                    if (JSONBasket.products[i]["prodConfStatus"] == 'Valid') {
                        prodConfStatusIcon = '{!URLFOR($Resource.BasketBuilderIcons, 'blue-tick.png')}';
                        prodConfStatusIconHover = 'Product configuration selected';
                    } else {
                        prodConfStatusIcon = '{!URLFOR($Resource.BasketBuilderIcons, 'exclamation_yellow.gif')}';
                        prodConfStatusIconHover = 'Invalid configuration';
                    }
                                             
                    // window.console.log(prodConfAddInfoHTML);
                    basketContentHTML = basketContentHTML + '<tr id="' + JSONBasket.products[i]["productConfReqId"] + '" class="dataRow" onmouseover="if (window.hiOn){hiOn(this);}" onmouseout="if (window.hiOff){hiOff(this);}" onfocus="if (window.hiOn){hiOn(this);}" onblur="if (window.hiOff){hiOff(this);}">\n';
                    basketContentHTML = basketContentHTML + '<td><input class="selProdConfReq" type="checkbox" /></td>\n';
                    basketContentHTML = basketContentHTML + '<td><img  id="img' + prodConfDetsId +'" src="{!URLFOR($Resource.BasketBuilderIcons, 'toggle-expand-alt_blue.png')}" title="' + prodConfDetsActionTitle + '" class="iconStyle16" onClick="' + prodConfDetsAction +'" /></td>\n';
                    // delete icon commented out on request. Functionality is here but not displayed.
                    // pay attention, when commenting out on header cell bellow
                    //basketContentHTML = basketContentHTML + '<td><img src="{!URLFOR($Resource.BasketBuilderIcons, 'Close_Box_Red.png')}" title="Delete product configuration." class="iconStyle16" onClick="deleteFromBasket( $(this).parent().parent().prop(\'id\'));" /></td>\n';
                    if (JSONBasket.products[i]["prodConfId"] === undefined) {
                        basketContentHTML = basketContentHTML + '<td><img src="{!URLFOR($Resource.BasketBuilderIcons, 'file_edit.png')}" title="Offer not selected." class="iconStyle16" onClick="null;" /></td>\n';
                    }
                    else {
                        basketContentHTML = basketContentHTML + '<td><img src="{!URLFOR($Resource.BasketBuilderIcons, 'file_edit.png')}" title="Edit product configuration" class="iconStyle16 editProdConfImg" onClick="prodConfigEditIFrame($(this), \''+JSONBasket.products[i]["prodConfId"]+'\');" /></td>\n';
                    }
                    // for high level products there is only one column spaning over 5 columns
                    if (JSONBasket.products[i]["productType"] == 'HLP') {
                        basketContentHTML = basketContentHTML + '<td class="dataCell productCategory" colspan="2">' + JSONBasket.products[i]["productCategory"] + '</td>\n';
                        //basketContentHTML = basketContentHTML + '<td class="dataCell offer">' + JSONBasket.products[i]["Offer"] + '</td>\n';
                        basketContentHTML = basketContentHTML + '<td class="dataCell offer"><a href="/' + JSONBasket.products[i]["prodConfId"] + '">' + JSONBasket.products[i]["prodConfName"] + '</a></td>\n';
                        
                        // for high level products offer is always selected
                        statusCell = '<td><img src="' + prodConfStatusIcon + '" title="Product configuration selected." class="iconStyle16" /></td>\n';
                        avCheckStatusCell = '<td></td>\n';
                    } else {
                        basketContentHTML = basketContentHTML + '<td class="dataCell productCategory">' + JSONBasket.products[i]["productCategory"] + '</td>\n';
                        // address is shown as street + buildingNumber + Locality, and rest of information is shown in hoovering div
                        //addressCell = JSONBasket.products[i]["postCode"];
                        //addressCell = JSONBasket.products[i]["phoneNumber"];
                        
                        var optionals = JSON.parse(JSONBasket.products[i]["optionals"]);
                        addressCell = defineText(optionals["selectedAddressDisplay"]);
                        /* addressCell = defineText(JSONBasket.products[i]["BTAdr_Street"]) + ' ' + defineText(JSONBasket.products[i]["BTAdr_BuildingNumber"]) + ' ' +
                                      defineText(JSONBasket.products[i]["BTAdr_Locality"]);
                                     */
                        BTAdrId = 'BTAdrId-' + JSONBasket.products[i]["productConfReqId"];
                        //if (addressCell.trim().length > 0){
                            BTAdrIds[i] = BTAdrId;
                            
                            /*addressCell = addressCell + '<div id="' + BTAdrId + '-Detail" class="addressDetailDiv"><table class="addressDetailTable">\n';
                            addressCell = addressCell + '<tr><td>Apartment Extension:</td><td>' + defineText(JSONBasket.products[i]["Apartment_Extension__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Apartment Number:</td><td>' + defineText(JSONBasket.products[i]["Apartment_Number__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Apartment Type:</td><td>' + defineText(JSONBasket.products[i]["Apartment_Type__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Customer:</td><td>' + defineText(JSONBasket.products[i]["Customer__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Contact:</td><td>' + defineText(JSONBasket.products[i]["Contact__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Country Code:</td><td>' + defineText(JSONBasket.products[i]["Country_Code__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Country Name:</td><td>' + defineText(JSONBasket.products[i]["Country_Name__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>City:</td><td>' + defineText(JSONBasket.products[i]["City__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Maximum No of Items returned in address:</td><td>' + defineText(JSONBasket.products[i]["Maximum_No_of_Items_returned_in_address__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Municipality Code:</td><td>' + defineText(JSONBasket.products[i]["Municipality_Code__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Municipality Name:</td><td>' + defineText(JSONBasket.products[i]["Municipality_Name__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>EASY Id:</td><td>' + defineText(JSONBasket.products[i]["OSRE_Id__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Postal Code:</td><td>' + defineText(JSONBasket.products[i]["Postal_Code__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Postal Office Name:</td><td>' + defineText(JSONBasket.products[i]["Postal_Office_Name__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Province:</td><td>' + defineText(JSONBasket.products[i]["Province__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Real Estate Code:</td><td>' + defineText(JSONBasket.products[i]["Real_Estate_Code__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Return Level:</td><td>' + defineText(JSONBasket.products[i]["Return_Level__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Stair Letter:</td><td>' + defineText(JSONBasket.products[i]["Stair_Letter__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Street Name:</td><td>' + defineText(JSONBasket.products[i]["Street_Name__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Street Number:</td><td>' + defineText(JSONBasket.products[i]["Street_Number__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '<tr><td>Sub Region:</td><td>' + defineText(JSONBasket.products[i]["Region__c"]) + '</td></tr>\n';
                            addressCell = addressCell + '</table>\n</div>';*/
                        //}
                        //basketContentHTML = basketContentHTML + '<td class="dataCell phoneNumber">' + JSONBasket.products[i]["phoneNumber"] + '</td>\n';
                        basketContentHTML = basketContentHTML + '<td class="dataCell BTAddress" id="' + BTAdrId + '">' + addressCell + '</td>\n';
                        //
                        /// [ZD] if (JSONBasket.products[i]["Offer"] !== undefined) {
                        if (JSONBasket.products[i]["prodConfId"] !== undefined) {
                            if (activeCloneJobs.hasOwnProperty(JSONBasket.products[i]["productConfReqId"])) {
                                offerCell = '<td class="dataCell center" id="'+ offerId +'"><img id="'+ offerImgId +'" src="{!URLFOR($Resource.BasketBuilderIcons, 'processing_7.gif')}" class="iconStyle24height" alt="Waiting for Cloning" title="Waiting for Cloning"  /></td>\n';
                            }
                            else {
                                //offerCell = '<td class="dataCell offer">' + JSONBasket.products[i]["Offer"] + '</td>\n';
                                //offerCell = '<td class="dataCell offer">' + JSONBasket.products[i]["prodConfName"] + '</td>\n';
                                offerCell = '<td class="dataCell offer"><a href="/' + JSONBasket.products[i]["prodConfId"] + '">' + JSONBasket.products[i]["prodConfName"] + '</a></td>\n';
                            }
                            statusCell = '<td><img src="' + prodConfStatusIcon + '" title="' + prodConfStatusIconHover + '" class="iconStyle16" /></td>\n';
                        } else if (JSONBasket.products[i]["avCheckAttachment"] !== undefined) {
                            if (activeCloneJobs.hasOwnProperty(JSONBasket.products[i]["productConfReqId"])) {
                                offerCell = '<td class="dataCell center" id="'+ offerId +'"><img id="'+ offerImgId +'" src="{!URLFOR($Resource.BasketBuilderIcons, 'processing_7.gif')}" class="iconStyle24height" alt="Waiting for Cloning" title="Waiting for Cloning"  /></td>\n';
                            }
                            else {
                                offerCell = '<td class="dataCell center" id="' + getOfferCellId(JSONBasket.products[i]["productConfReqId"]) + '"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'availableOffers32.png')}" class="iconStyle24 avOffersImg" alt="Available offers" title="Available offers"  onclick="showAvailableOffers(\'' + JSONBasket.products[i]["productConfReqId"] + '\', \''+JSONBasket.products[i]["productCategoryId"]+'\');" /></td>\n';
                            }
                            statusCell = '<td><img src="{!URLFOR($Resource.BasketBuilderIcons, 'exclamation.gif')}" title="Product configuration not selected." class="iconStyle16" /></td>\n';
                        } else {
                            // for prodConfReqs that do not av. check completed add them to activeCalloutChecks list
                            window.console.log('adding record to activeCalloutChecks...');
                            if (!activeCalloutChecks.hasOwnProperty(JSONBasket.products[i]["productConfReqId"])){
                                activeCalloutChecks[JSONBasket.products[i]["productConfReqId"]] = JSONBasket.products[i]["productConfReqId"];
                                window.console.log('record added to activeCalloutChecks...' + JSONBasket.products[i]["productConfReqId"]);
                            }
                            offerId = getOfferCalloutCellId(JSONBasket.products[i]["productConfReqId"]);
                            offerImgId = 'offerImg-'+ JSONBasket.products[i]["productConfReqId"] + '-' + JSONBasket.products[i]["productCategoryId"];
                            offerCell = '<td class="dataCell center" id="'+ offerId +'"><img id="'+ offerImgId +'" src="{!URLFOR($Resource.BasketBuilderIcons, 'processing_7.gif')}" class="iconStyle24height" alt="Waiting for Callout" title="Waiting for Callout"  /></td>\n';
                            statusCell = '<td><img src="{!URLFOR($Resource.BasketBuilderIcons, 'exclamation.gif')}" title="Product configuration not selected." class="iconStyle16" /></td>\n';
                        }
                        if (JSONBasket.products[i]["avCheckAttachment"] !== undefined) {
                            // add attachment to global list of configuration request attachments if attachment exists
                            // window.console.log("attachment showing...");
                            // window.console.log(JSONBasket.products[i]["avCheckAttachment"]);
                            gConfReqAtt[JSONBasket.products[i]["productConfReqId"]] = JSONBasket.products[i]["avCheckAttachment"];
                        }
                        dateCell = '';
                        //dateCell += '<td class="dataCell date" id="dateCell_' + JSONBasket.products[i]["productConfReqId"] + '">';
                        //dateCell += '<input disabled="disabled" id="dateCell_' + JSONBasket.products[i]["productConfReqId"] + '_text" type="text" value="" readonly="true"/>';
                        ////dateCell += '<input type="button" value="Select date" onclick="displayCalendar(this, \'' + JSONBasket.products[i]["productConfReqId"] + '\');"/>';
                        //dateCell += '<input type="button" value="Get dates" onclick="getAvailableDates(\'' + JSONBasket.products[i]['desiredDate'] + '\', \'' + JSONBasket.products[i]['productConfReqId'] + '\')" /></td>\n';
                        
                        basketContentHTML = basketContentHTML + offerCell + dateCell;
                        avCheckStatusCellId = getAvCheckStatusCellId(JSONBasket.products[i]["productConfReqId"]);
                        avCheckStatusCell = '<td id="' + avCheckStatusCellId + '">' + refreshAvCheckStatusCell(JSONBasket.products[i]["productConfReqId"], JSONBasket.products[i]["avCheckAttachment"]) + '</td>\n';
                    }
                    basketContentHTML = basketContentHTML + '<td class="dataCell" align="right">' + formatPound(JSONBasket.products[i]["totalMRC"]) + '</td>\n';
                    basketContentHTML = basketContentHTML + '<td class="dataCell" align="right">' + formatPound(JSONBasket.products[i]["totalQRC"]) + '</td>\n';
                    basketContentHTML = basketContentHTML + '<td class="dataCell" align="right">' + formatPound(JSONBasket.products[i]["totalYRC"]) + '</td>\n';
                    basketContentHTML = basketContentHTML + '<td class="dataCell" align="right">' + formatPound(JSONBasket.products[i]["totalOC"]) + '</td>\n';
                    basketContentHTML = basketContentHTML + avCheckStatusCell;
                    basketContentHTML = basketContentHTML + statusCell;
                    //basketContentHTML = basketContentHTML + '<td class="dataCell">' + defineText(JSONBasket.products[i]["commercialApprovalStatus"]) + '</td>\n';
                    //basketContentHTML = basketContentHTML + '<td class="dataCell">' + defineText(JSONBasket.products[i]["technicalApprovalStatus"]) + '</td>\n';
                    if ('{!$Profile.Name}' == 'System Administrator') {
                        basketContentHTML = basketContentHTML + '<td class="dataCell"><a href="/' + JSONBasket.products[i]["productConfReqId"] + '">' + JSONBasket.products[i]["productConfReqName"] + '</a></td>\n';
                    }
                    basketContentHTML = basketContentHTML + '</tr>\n';
                    // add prod conf. details (line items and attachments)
                    basketContentHTML = basketContentHTML + prodConfAddInfoHTML;
                }
                //window.console.log(basketContentHTML);
                //append new line items to basket product
                $('#productBasketContent').children().remove();
                
                if (basketContentHTML.length == 0) {
                    basketContentHTML = '<tr class="dataRow"><td colspan="16" class="dataCell">Product basket is empty.</td></tr>';
                }
                $('#productBasketContent').append(basketContentHTML);
                
                // create mouseenter/mouseleave events for detailed address display
                window.console.log(BTAdrIds.length);
                for (i = 0; i < BTAdrIds.length; i++){
                    window.console.log('loop #' + BTAdrIds[i] + '-Detail');
                    BTAdrId = BTAdrIds[i] + '-Detail';
                    $('#' + BTAdrIds[i]).on("mouseenter", {what : "show", id: BTAdrIds[i]}, showHideAddressDetails);
                    $('#' + BTAdrIds[i]).on("mouseleave", {what : "hide", id: BTAdrIds[i]}, showHideAddressDetails);
                }
                // expand product configurations that have additional messages
                if (!$.isEmptyObject(gAppProcessMsgs)) {
                    for (var i in gAppProcessMsgs) {
                        prodConfDetsId = getProdConfDetsId(i);
                        showHideProdConfDets(prodConfDetsId);
                    }
                    gAppProcessMsgs = {};
                    growlNow('Error occurred. Review selected offers for error details!');
                }
                
                // $('.manageBasketProducts').unblock();
                // $('.addProductToBasket').unblock();
                 
                // start check interval if required for avaliability check
                if (checkIntervalId == null && !$.isEmptyObject(activeCalloutChecks)) {
                    checkIntervalId = window.setInterval(getCalloutRequestStatus, checkInterval);
                    window.console.log(' refresh Basket content -> created interval id:' + checkIntervalId);
                }
                
                // disable basket content actions if basket is readonly
                // only for partner users
                if({!not IsStandardUser}){
                    disableBasketContentActions(pbReadOnly);
                }
                
                // now refresh basket header
                refreshProductBasket();
            }
            
            // Calendar
            //var $j = jQuery.noConflict();
            
            function displayCalendar(elem, pcrId){
                var left = elem.offset().left + elem.width()/2;
                var top =  elem.offset().top;
                CS.calendar.api.setPosition(left, top);
                
                if (pcrId == -1) {
                    CS.calendar.api.setSchedule(genSampleDates(pcrId), pcrId, callbackPopTextDesiredDate);
                }
                else {
                    CS.calendar.api.setSchedule(genSampleDates(pcrId), pcrId, callbackPopText);
                }
                
                CS.calendar.api.show();
            }
            
            function genSampleDates(pcrId){
                if (pcrId != -1) {
                    return JSONDatesMap[pcrId];
                }
                else {
                    var time = new Date().getTime();
                    var dates = [];
                    for(var i = 0; i < 100; i++){
                        dates.push(CS.calendar.util.timeToISODate(time + i * 86400000));
                    }
                    return dates;
                }
            }
            
            function callbackPopText(){
                if(arguments.length == 2){
                    $('#dateCell_' + arguments[0] + '_text').val(arguments[1]);
                    setDateOnConfiguration(arguments[0], arguments[1]);
                }
            }
            function callbackPopTextDesiredDate(){
                if(arguments.length == 2){
                    $('#desiredDateInput').val(arguments[1]);
                }
            }
            // /Calendar
            
            /**
             * function shows/hides addres detail detail div within product basket
             *
             * @param event triggering event
             */
            function showHideAddressDetails(event) {
                if (event.data.what == 'show') {
                    // window.console.log(event.data.what + ' - ' + event.data.id);
                    $('#' + event.data.id + '-Detail').show();
                }
                if (event.data.what == 'hide') {
                    // window.console.log(event.data.what + ' - ' + event.data.id);
                    $('#' + event.data.id + '-Detail').hide();
                }
            }
            
            /**
             * function shows/hides EAD detailed information list
             *
             * @param elem triggering DOM element (EAD checkbox)
             */
            function showHideEADRequestType(elem) {
                if (elem.prop('checked') == true) {
                    $('#avCheckEADRequestType').show();
                } else {
                    $('#avCheckEADRequestType').hide();
                }
            }
            
            /**
             * function show available offers div when invoked on the screen
             *
             * @param prodConfReqId id of triggering element/product configuration request
             * @param productCategoryId product category ID used to fetch underlying categories
             */
            function showAvailableOffers(prodConfReqId, productCategoryId) {
                // get Id of product configuration Request that is being updated and pass it as pass through parameterer
                // that will be handled in handleShowAvailableOffersResponse
                // var prodConfReqId =  elem.parent().parent().prop('id') ;
                window.console.log('req_id->'+prodConfReqId);
                
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CSBasketBuilderEController.getAvailableOffers}',
                    prodConfReqId,
                    productCategoryId,
                    handleShowAvailableOffersResponse,
                    {escape: false}
                );
            }
            
            /**
             * function handles Remote Action reponse from server for showAvailableOffers
             *
             * @param result JSON structure that holds list of offers returned form the server
             * @param event holds infromation about returning event
             */
            function handleShowAvailableOffersResponse(result, event){
                var JSONOffer = JSON.parse(result);
                var availableOffersHTML = '';
                var avaliabilityCells = '';
                var selectAvOfferAction = '';

                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();

                var greenDotImg = '<img src="{!URLFOR($Resource.BasketBuilderIcons, 'greenDot24.png')}" title="Offer is available." class="iconStyle16" />';
                var redDotImg = '<img src="{!URLFOR($Resource.BasketBuilderIcons, 'redDot24.png')}" title="Offer is not available." class="iconStyle16" style="cursor:default;"/>';

                for (var i = 0; i < JSONOffer.length; i++){
                    if (JSONOffer[i]["offerAvailable"] == "true") {
                        avaliabilityCells = '<td style="text-align:center;">'+greenDotImg+'</td>';
                        selectAvOfferAction = 'addOfferToConfigReq(\'' + JSONOffer[i]["prodConfReqId"] + '\', \'' + JSONOffer[i]["offerId"] + '\');';
                        avTableRowClass = 'offerAvailableRow';
                    } else {
                        avaliabilityCells = '<td style="text-align:center;">'+redDotImg+'</td>';
                        selectAvOfferAction = 'null;';
                        avTableRowClass = 'offerNotAvailableRow';
                    }
                                   
                    availableOffersHTML = availableOffersHTML + '<tr class="offerRow dataRow ' + avTableRowClass + '" onclick="' + selectAvOfferAction + '">\n';
                    availableOffersHTML = availableOffersHTML + '<td style="text-align:left;"><span style="font-weight:bold; display:block;">'+JSONOffer[i]["offerName"]+'</span>';
                    availableOffersHTML = availableOffersHTML + (JSONOffer[i]["offerDescription"] == null ? '' : JSONOffer[i]["offerDescription"]) + '</td>\n';
                
                    availableOffersHTML = availableOffersHTML + avaliabilityCells;
                    availableOffersHTML = availableOffersHTML + '<td style="padding-right:30px; text-align: justify;">' + (JSONOffer[i]["reasonOfferNotAvailable"] == null ? '' : JSONOffer[i]["reasonOfferNotAvailable"]) + '</td>';
                    // removing charge columns based on Bug 103804
                    availableOffersHTML = availableOffersHTML + '<td class="numberCol">'+formatPound(JSONOffer[i]["offerRC"])+'</td>';
                    availableOffersHTML = availableOffersHTML + '<td class="numberCol">'+formatPound(JSONOffer[i]["offerOC"])+'</td>';
                    availableOffersHTML = availableOffersHTML + '</tr>';
                }
                if (availableOffersHTML.length == 0) {
                    growlNow('Offers not available for selected product category.');
                } else {
                    aoDiv = '<div>\n';
                    aoDiv = aoDiv + '<div class="closeDivImg"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'close.png')}" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>';
                    aoDiv = aoDiv + '<div class="overflowTableWrap" style="border:1px solid #ececec; background-color:#ffffff">';
                    // Bug 103418 display header values for list of available offers
                    aoDiv = aoDiv + '<table class="availableOffersTable list"><tr class="BBTableHeader"><td style="width:240px; text-align:left;">Offer</td>';
                    // always using JSONOffer[0]["prodConfReqId"] because prodConfReqId is the same for all offers
                    aoDiv = aoDiv + '<td style="width:90px; text-align:center;">Availability</td><td style="text-align:left;">Offer Availability Message</td>';
                    aoDiv = aoDiv + '<td class="numberCol" style="width:100px;">Recurring Charge</td><td class="numberCol" style="width:100px;">One-Off Charge</td>';
                    aoDiv = aoDiv + '</tr>\n';
                    aoDiv = aoDiv + availableOffersHTML + '</table></div></div>';
                    
                    showOverlayedItem(aoDiv, '.overflowTableWrap', 45);
                    $("#processing_overlay").click(function () {
                        hideOverlayedItem();
                    });
                }
            }
                
            /**
             * function adds offer to Configuration Request
             *
             * @param prodConfReqId id of product configuration request that is being processed
             * @param offerId offer that gets added to the product configuration request
             */
            function addOfferToConfigReq(prodConfReqId, offerId) {
                var i = 0;
                var JSONParamsMap = {};
                var remoteActionToInvoke;
                // set user screen, hide div and disable data blocks
                hideOverlayedItem();
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                JSONParamsMap["prodConfReqId"] = prodConfReqId;
                JSONParamsMap["offerId"] = offerId;
                /// [ZD]
                JSONParamsMap["addressid"] = $('#hiddenParam1')[0].value;
                JSONParamsMap["addresssiteid"] = $('#hiddenParam2')[0].value;
                /// [ZD]
                var avCheckAtt = gConfReqAtt[prodConfReqId] == 'N/A' ? '' : JSON.stringify(gConfReqAtt[prodConfReqId]);
                var EADCheckAtt = gConfReqEADAtt[prodConfReqId] == null ? '' : JSON.stringify(gConfReqEADAtt[prodConfReqId]);
                window.console.log('EAD data: ' + EADCheckAtt);
                window.console.log(avCheckAtt);
                window.console.log(JSON.stringify(JSONParamsMap));
                
                // if product configuration request has product configuration attached invoke changeSelectedOffer
                if (gConfReqDets[prodConfReqId].prodConfId !== undefined) {
                    remoteActionToInvoke = '{!$RemoteAction.CSBasketBuilderEController.changeSelectedOffer}';
                } else {
                    remoteActionToInvoke = '{!$RemoteAction.CSBasketBuilderEController.addOfferToConfigReq}';
                }
                Visualforce.remoting.Manager.invokeAction(
                            remoteActionToInvoke,
                            JSON.stringify(JSONParamsMap),
                            avCheckAtt,
                            EADCheckAtt,
                            handleAddOfferToConfigReqResponse,
                            {escape: false, timeout: 120000}
                );
            }
      
            /**
             * function handles response from addOfferToConfigReq
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleAddOfferToConfigReqResponse(result, event){
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
                console.log(result);
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    var resultJSON = JSON.parse(result);
                    switch (resultJSON.status) {
                        case 'success':
                            refreshBasketContent();
                            growlNow(resultJSON.message);
                            break;
                        case 'error':
                            growlNow(resultJSON.errorMessage);
                            break;
                    }
                }
            }
            
            /**
             * function shows or hides line items for selected product
             *
             * @param lineItemId id of line item row for show/hide
             */
            function showHideProdConfDets(detsId){
                window.console.log(detsId);
                window.console.log('#img'+detsId);
                                
                if (jQuery('#img'+detsId).prop('title') == 'Expand') {
                    jQuery('#img'+detsId).attr('src',
                        '{!URLFOR($Resource.BasketBuilderIcons, 'toggle-collapse-alt_blue.png')}'
                    );
                    jQuery('#img'+detsId).prop('title','Collapse');
                    $('#'+detsId).show();
                } else {
                    jQuery('#img'+detsId).attr('src',
                        '{!URLFOR($Resource.BasketBuilderIcons, 'toggle-expand-alt_blue.png')}'
                    );
                    jQuery('#img'+detsId).prop('title','Expand');
                    $('#'+detsId).hide();
                }
            }
            
            /**
             * function display message on screen
             *
             * @param message message to display
             */
            function growlNow(message) {
                $.jGrowl('<table class="growl"><tr><td><img src="{!URLFOR($Resource.BasketBuilderIcons, "Information_blue.png")}"></td><td>'+message+'</td></tr></table>');
            }
            
             /**
              * function blocks screen element for interaction with the user
              *
              * @param message message to display
              */
            function blockScreenElement(element) {
                $(element).block({
                    message: '<div style="width:300px;height:150px"></div>',
                    css: {
                        border: '0px solid #A4D48C',
                         background: 'url("{!URLFOR($Resource.BasketBuilderIcons, "processing_5.gif")}") 50% 50% no-repeat',
                        cursor: 'default'
                    },
                    overlayCSS: {
                        backgroundColor: '#ccc',
                        opacity: 0.6,
                        cursor: 'default'
                    }
                });
            }
            
             /**
              * function append required marker red bar to input element
              * works only for table cells td
              *
              * @param elem DOM element that is being changed
              */
            function addRequiredFieldMarker(elem) {
                var innerHTML = elem.html();
                //
                innerHTML = '<div class="requiredInputBB"><div class="requiredBlockBB"></div>\n';
                innerHTML = innerHTML + elem.html();
                innerHTML = innerHTML + '\n</div>\n';
                //
                elem.children().remove();
                elem.append(innerHTML);
            }
            
            /**
             * function does switch on the screen between high level and detailed products for selection
             *
             */
            function detailedHighLevelSwitch(){
                if (document.getElementById('detailedHighLevelBtn').value == 'Switch to High Level Products') {
                    document.getElementById('detailedHighLevelBtn').value = 'Switch to Detailed Products';
                    $('#highLevelProductSelector').show();
                    $('#detailedProductSelector').hide();
                } else {
                    document.getElementById('detailedHighLevelBtn').value = 'Switch to High Level Products';
                    $('#highLevelProductSelector').hide();
                    $('#detailedProductSelector').show();
                }
            }
            
            /**
             * function returns empty string if text is undefined, otherwise it returns text
             *
             */
            function defineText(text) {
                if(text === undefined) {
                    return '';
                } else {
                    return text;
                }
            }
            
            /**
             * function formats number to currency (£) format
             *
             * @param num number that requires formating
             * @return returns number formated as currency (£)
             */
            function formatPound(num) {
                var decPlaces = 2;
                var decSeparator = '.';
                var thouSeparator = ',';
                var sign = num < 0 ? '-' : '';
                i = parseInt(num = Math.abs(+num || 0).toFixed(decPlaces)) + '';
                j = (j = i.length) > 3 ? j % 3 : 0;
                return '€' + sign + (j ? i.substr(0, j) + thouSeparator : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + thouSeparator) + (decPlaces ? decSeparator + Math.abs(num - i).toFixed(decPlaces).slice(2) : '');
            }
              
            /**
             * function refreshes product basket header
             *
             */
            function refreshProductBasket() {
                var prodBasketId = '{!cscfga__Product_Basket__c.Id}';
                if (prodBasketId != null) {
                    Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.CSBasketBuilderEController.refreshProductBasket}',
                                prodBasketId,
                                handleRefreshProductBasketResponse,
                                {escape: false}
                            );
                }
            }
            
            /**
             * function handles remote action response for refreshProductBasket
             *
             * @param result holds information about product basket header
             * @param event holds infromation about returning event
             */
            function handleRefreshProductBasketResponse(result, event) {
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    var JSONBasket = JSON.parse(result);
                    // jQuery requires special characters to be escpaed with \\ in selectors
                    var idRevPath = "#p\\:b\\:BasketHeaderSection\\:revenueDetails\\:";
                    var idGenPath = "#p\\:b\\:BasketHeaderSection\\:generalDetails\\:";
                    $(idRevPath + "basketTotalMRC").text(formatPound(JSONBasket["totalMRC"]));
                    $(idRevPath + "basketTotalQRC").text(formatPound(JSONBasket["totalQRC"]));
                    $(idRevPath + "basketTotalYRC").text(formatPound(JSONBasket["totalYRC"]));
                    $(idRevPath + "basketTotalOC").text(formatPound(JSONBasket["totalOC"]));
                    
                    if (JSONBasket["includesHLP"] == 'Y') {
                        $(idGenPath + "incHLP").children().first().attr("src", '/img/checkbox_checked.gif');
                        $(idGenPath + "incHLP").children().first().attr("alt", 'Checked');
                        $(idGenPath + "incHLP").children().first().attr("title", 'Checked');
                    } else {
                        $(idGenPath + "incHLP").children().first().attr("src", '/img/checkbox_unchecked.gif');
                        $(idGenPath + "incHLP").children().first().attr("alt", 'Not Checked');
                        $(idGenPath + "incHLP").children().first().attr("title", 'Not Checked');
                    }
                }
            }
            
            /**
             * function invokes remote action that returns list of available addresses based on web service callout (AM)
             *
             * @param postCode postcode for which address search is initated
             */
            function getAvailableAddresses(elem){
                blockScreenElement('.addProductToBasket');
                /* reset address holder */
                resetBTAddressHolder();
                
                window.console.log('fetching...'+elem.val());
                // check if post code has valid format
                elem.val(elem.val().trim());
                ///var validPostcode = checkPostCode(elem.val());
                var validPostcode = true;
                if (validPostcode != false) {
                    ///elem.val(validPostcode);
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.getAvailableAddresses}',
                            $('#cityInput')[0].value + '|' + $('#postalCodeInput')[0].value + '|' + $('#streetNameInput')[0].value + '|' + $('#streetNumberInput')[0].value + '|' + '{!cscfga__Product_Basket__c.Id}',
                            handleGetAvailableAddressesResponse,
                            {escape: false}
                        );
                } else {
                    resetBTAddressHolder();
                    $('.addProductToBasket').unblock();
                    growlNow('Please provide valid postcode!');
                }
            }
            
            /**
             * function handles response from getAvailableAddresses remote action
             *
             * @param result holds JSON representation of list of addresses associated with post code
             * @param event holds infromation about returning event
             */
            function handleGetAvailableAddressesResponse(result, event) {
                //JSONAddressList = JSON.parse(result);
                var addressCheckResult = JSON.parse(result);
                JSONAddressList = addressCheckResult.addressList;
                
                // if returning value from the controller is null webservice is unavailable
                window.console.log(JSONAddressList);
                //if (JSONAddressList == null) {
                if (addressCheckResult == null) {
                    $('.addProductToBasket').unblock();
                    growlNow('Webservice callout unavailable!');
                    return;
                }
                else if (addressCheckResult.errorMessage !== null) {
                    growlNow(addressCheckResult.errorMessage);
                }
                
                // if returning value from the controller contains error, for now display error
                $('.addProductToBasket').unblock();
                if (!(JSONAddressList.Error === undefined)) {
                    growlNow(JSONAddressList.Error.ErrorCategory+': '+JSONAddressList.Error.ErrorCode+': '+JSONAddressList.Error.ErrorMessage);
                }
            }
            
            /**
             * functions displays list of available addresses as a pop-up div from which user can select single address
             *
             */
            function showAvailableAddresses(){
                if(JSONAddressList == null) {
                    growlNow('Address list is empty.');
                    return;
                }
                
                var aaDiv;
                
                /// [ZD]
                aaTable = '<table class="list" style="width:100%;border-spacing:0; border-collapse:collapse;"><tr style="height:27px;" class="BBTableHeader">';
                //aaTable += '<td>Customer</td><td>City</td><td>Postal code</td><td>Street name</td><td>Street number</td>';
				//aaTable += '<td>City</td><td>Postal code</td><td>Street name</td><td>Street number</td>';
				aaTable += '<td>Street Name</td><td>Street number</td><td>Stair Letter</td><td>Apartment Number</td><td>Apartment Extension</td><td>Postal code</td><td>Postal Office Name</td><td>Country</td>';
                
                for (var i = 0; i < JSONAddressList.length; i++){
                    aaTable += '<tr class="selectAddressRow" onclick="selectBTAddress(' + i + ')">';
                    //aaTable += '<td>' + defineText(JSONAddressList[i].Customer__c) + '</td>\n';
                    aaTable += '<td>' + defineText(JSONAddressList[i].Street_Name__c) + '</td>\n';
                    aaTable += '<td>' + defineText(JSONAddressList[i].Street_Number__c) + '</td>\n';
					aaTable += '<td>' + defineText(JSONAddressList[i].Stair_Letter__c) + '</td>\n';
					aaTable += '<td>' + defineText(JSONAddressList[i].Appartment_Number__c) + '</td>\n';
					aaTable += '<td>' + defineText(JSONAddressList[i].Appartment_Extension__c) + '</td>\n';
					aaTable += '<td>' + defineText(JSONAddressList[i].Postal_Code__c) + '</td>\n';
					aaTable += '<td>' + defineText(JSONAddressList[i].Postal_Office_Name__c) + '</td>\n';
					
					if (defineText(JSONAddressList[i].Country__c) !== '') {
						aaTable += '<td>' + defineText(JSONAddressList[i].Country__c) + '</td>\n';
					}
					else if (defineText(JSONAddressList[i].Country_Code__c) !== '') {
						aaTable += '<td>' + defineText(JSONAddressList[i].Country_Code__c) + '</td>\n';
					}
					else {
						aaTable += '<td>' + defineText(JSONAddressList[i].Country_Name__c) + '</td>\n';
					}
					
                    aaTable += '</tr>';
                }
                
                aaTable = aaTable + '</table>';
                
                aaDiv = '<div>\n';
                aaDiv = aaDiv + '<div class="closeDivImg"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'close.png')}" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>';
                aaDiv = aaDiv + '<div class="overflowTableWrap" style="border:1px solid #ececec; background-color:#ffffff">';
                aaDiv = aaDiv + aaTable + '</div></div>';
                
                showOverlayedItem(aaDiv, '.overflowTableWrap', 45);
                $("#processing_overlay").click(function () {
                    hideOverlayedItem();
                });
            }
			
			/**
			 * function invokes remote action that returns list of available addresses based on web service callout (AM)
			 *
			 * @param postCode postcode for which address search is initated
			 */
			function cloneOverlayGetAvailableAddresses () {
				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.CSBasketBuilderEController.getAvailableAddresses}',
					$('#cloneOverlayCityInput')[0].value + '|' + $('#cloneOverlayPostalCodeInput')[0].value + '|' + $('#cloneOverlayStreetNameInput')[0].value + '|' + $('#cloneOverlayStreetNumberInput')[0].value + '|' + '{!cscfga__Product_Basket__c.Id}',
					handleCloneOverlayGetAvailableAddressesResponse,
					{escape: false}
				);
			}
			
			/**
			 * function handles response from getAvailableAddresses remote action
			 *
			 * @param result holds JSON representation of list of addresses associated with post code
			 * @param event holds infromation about returning event
			 */
			function handleCloneOverlayGetAvailableAddressesResponse(result, event) {
				var cloneOverlayJSONAddressList = JSON.parse(result);
				
				// if returning value from the controller is null webservice is unavailable
				//IE//window.console.log(JSONAddressList);
				if (cloneOverlayJSONAddressList == null) {
					$('.addProductToBasket').unblock();
					growlNow('Webservice callout unavailable!');
					return;
				}
				
				// if returning value from the controller contains error, for now display error
				$('.addProductToBasket').unblock();
				if (!(cloneOverlayJSONAddressList.Error === undefined)) {
					growlNow(cloneOverlayJSONAddressList.Error.ErrorCategory+': '+cloneOverlayJSONAddressList.Error.ErrorCode+': '+cloneOverlayJSONAddressList.Error.ErrorMessage);
				}
				else {
					cloneOverlayShowAvailableAddresses(cloneOverlayJSONAddressList);
				}
			}
			
			/**
			 * functions displays list of available addresses as a pop-up div from which user can select single address
			 *
			 */
			function cloneOverlayShowAvailableAddresses (cloneOverlayJSONAddressList) {
				if(cloneOverlayJSONAddressList == null) {
					growlNow('Address list is empty.');
					return;
				}
				
				$('#cloneOverlayAddressSearchResultsDiv').css('display', '');
				
				var aaTable = '<table class="list" style="width:100%;border-spacing:0; border-collapse:collapse;"><tr style="height:27px;" class="BBTableHeader">';
				aaTable += '<td><input type="checkbox" class="cloneOverlayAddressSelectionCheckboxSelectAll" id="cloneOverlayAddressSelectionCheckboxSelectAll" value="" onclick="cloneOverlayToggleSelectAllAddresses()" /></td><td>City</td><td>Postal code</td><td>Street name</td><td>Street number</td>';
				
				for (var i = 0; i < cloneOverlayJSONAddressList.length; i++){
					aaTable += '<tr class="selectAddressRow">';
					aaTable += '<td><input type="checkbox" class="cloneOverlayAddressSelectionCheckbox" id="cloneOverlayAddressSelectionCheckbox_' + i + '" value="' + defineText(cloneOverlayJSONAddressList[i].OSRE_Id__c) + '" onclick="cloneOverlayToggleSelectAddresses($(this));" /></td>\n';
					aaTable += '<td>' + defineText(cloneOverlayJSONAddressList[i].City__c) + '</td>\n';
					aaTable += '<td>' + defineText(cloneOverlayJSONAddressList[i].Postal_Code__c) + '</td>\n';
					aaTable += '<td>' + defineText(cloneOverlayJSONAddressList[i].Street_Name__c) + '</td>\n';
					aaTable += '<td>' + defineText(cloneOverlayJSONAddressList[i].Street_Number__c) + '</td>\n';
					aaTable += '</tr>';
				}
				
				aaTable = aaTable + '</table>';
				
				$('#cloneOverlayAddressListTable').html(aaTable);
			}
			
			function cloneOverlayToggleSelectAllAddresses () {
				if ($('#cloneOverlayAddressSelectionCheckboxSelectAll').prop('checked')) {
					$('.cloneOverlayAddressSelectionCheckbox').prop('checked', true);
				}
				if ($('#cloneOverlayAddressSelectionCheckboxSelectAll').prop('checked') == false) {
					$('.cloneOverlayAddressSelectionCheckbox').prop('checked', false);
				}
			}
			
			function cloneOverlayToggleSelectAddresses(elem) {
				if (elem.prop('checked') == false) {
					$('#cloneOverlayAddressSelectionCheckboxSelectAll').prop('checked', false);
				}
			}
			
			/**
             * function invokes remote action that returns list of available dates based on web service callout (DAC)
             */
            function getAvailableDates(desiredDate, pcrId) {
                blockScreenElement('.manageBasketProducts');
                
                Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CSBasketBuilderEController.getAvailableDates}',
                        desiredDate,
                        pcrId,
                        handleGetAvailableDatesResponse,
                        {escape: false}
                    );
                
            }
            
            /**
             * function handles response from getAvailableDates remote action
             */
            function handleGetAvailableDatesResponse(result, event) {
                JSONDatesResult = JSON.parse(result);
                
                // if returning value from the controller is null webservice is unavailable
                window.console.log(JSONDatesResult);
                if (JSONDatesResult == null) {
                    $('.manageBasketProducts').unblock();
                    growlNow('Webservice callout unavailable!');
                    return;
                }
                
                // if returning value from the controller contains error, for now display error
                $('.manageBasketProducts').unblock();
                if (!(JSONDatesResult.Error === undefined)) {
                    growlNow(JSONDatesResult.Error);
                    return;
                }
                
                JSONDatesMap[JSONDatesResult.productConfigurationRequestId] = JSONDatesResult.availableDates;
                
                // automatic calendar display
                displayCalendar($('#dateCell_' + JSONDatesResult.productConfigurationRequestId), JSONDatesResult.productConfigurationRequestId);
            }
            
            /**
             * function invokes a remote action that writes the selected date to the configuration
             */
            function setDateOnConfiguration(pcrId, selectedDate) {
                blockScreenElement('.manageBasketProducts');
                
                Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CSBasketBuilderEController.setDateOnConfiguration}',
                        selectedDate[0],
                        pcrId,
                        handleDatesOnConfigurationResponse,
                        {escape: false}
                    );
                
            }
            
            /**
             * function handles response from setDateOnConfiguration remote action
             */
            function handleDatesOnConfigurationResponse(result, event) {
                // if returning value from the controller is null webservice is unavailable
                window.console.log(JSONDatesResult);
                if (result == null) {
                    $('.manageBasketProducts').unblock();
                    growlNow('Webservice callout unavailable!');
                    return;
                }
                
                $('.manageBasketProducts').unblock();
                growlNow(result);
            }
            
            /**
             * functions select BT address and displays address information DIV on basket builder
             *
             */
            function selectBTAddress(idx){
                /// [ZD]
                var selectedAdrHTML;
                //selBTAddrHTML = 'Customer: '+ defineText(JSONAddressList[idx].OSRE_Id__c) +'</br>';
                selBTAddrHTML = 'Selected address: <span id="selectedAddressDisplay">' + defineText(JSONAddressList[idx].Street_Name__c) + ' ' + defineText(JSONAddressList[idx].Street_Number__c) + ' ' + defineText(JSONAddressList[idx].Stair_Letter__c) + ' ' + defineText(JSONAddressList[idx].Appartment_Number__c) + ' ' + defineText(JSONAddressList[idx].Appartment_Extension__c) + '</span></br>';
                selBTAddrHTML = selBTAddrHTML + '<input type="hidden" id="selectedDate" value="' + idx + '" />';
                $('#hiddenParam1')[0].value = JSONAddressList[idx].Id;
                $('#hiddenParam2')[0].value = JSONAddressList[idx].OSRE_Id__c;
                //$('#osreId')[0].value = JSONAddressList[idx].Id;
                $('#osreId')[0].value = JSONAddressList[idx].OSRE_Id__c;
                $('#selectedBTAddress').empty();
                $('#selectedBTAddress').append(selBTAddrHTML);
                hideOverlayedItem();
            }
            
            /**
             * [ZD] functions select BT address and displays address information DIV on basket builder
             *
             */
            function directInputBTAddress(elem){
                /*var selectedAdrHTML;
                selBTAddrHTML = 'Date: '+ defineText(JSONAddressList[idx].Date) +'</br>';
                selBTAddrHTML = selBTAddrHTML + 'WeatherId: '+defineText(JSONAddressList[idx].WeatherID) +'</br>';
                selBTAddrHTML = selBTAddrHTML + '<input type="hidden" id="selectedDate" value="' + idx + '" />';*/
                $('#hiddenParam1')[0].value = elem.val();
                $('#osreId')[0].value = elem.val();
                $('#selectedBTAddress').empty();
                hideOverlayedItem();
                
            }
            
            /**
             * function invokes remote action that returns high level offers for selected category
             *
             */
            function getHighLevelOffersForCategory(){
                var prodCat = $('#highLevelProductCategories').val();
                window.console.log('fetching offers for...'+prodCat);

                // remove children from offer list
                $('#highLevelOffers').children().remove();
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.getHighLevelOffersForCategory}',
                            prodCat,
                            handleGetHighLevelOffersForCategoryResponse,
                            {escape: false}
                        );
            }
            
            /**
             * function handles response from remote action that returns high level offers based on selected product category
             * function renders select list of high level offers
             *
             * @param result JSON string that holds list of high level offers for selected category
             * @param event holds infromation about returning event
             */
            function handleGetHighLevelOffersForCategoryResponse(result, event) {
                var offersHTML = "";
                var JSONList = JSON.parse(result);
  
                for (var i = 0; i < JSONList.offers.length; i++){
                    offersHTML = offersHTML + '<option value="' + JSONList.offers[i]["offerId"] + '">' +  JSONList.offers[i]["offerName"] + '</option>';
                }
                $('#highLevelOffers').append(offersHTML);
            }
              
            /**
             * function resets BT address list holders
             *
             */
            function resetBTAddressHolder() {
                    $('#selectedBTAddress').empty();
                    $('#selectedBTAddress').append('Select EASY Address');
                    JSONAddressList = null;
            }
            
            /**
             * function refreshes Product Filter list, Postcode visibility, Phone Number visibility and
             * BTAddress visibility input fields based on selected product category and avaliability checks
             * required
             *
             */
            function refreshRequiredFieldsForProdCat(){
                window.console.log('refreshing add to basket section...');
                var propId;
                var selProdCat = $('#addDetailedProduct option:selected').text();
                // deselect all checkboxes, disable all
                $('#avblChkAll').prop('checked', null);
                $('.selectMe').prop('checked', null).prop('disabled', true);
                // selectDeselectAll('avblChks', 'avblChkAll', 'selectMe');
                // $('.selectMe').prop('disabled', true);
                
                //if nothing is selected hide all or if product category is selected but check is not required hide all
                if (($('#addDetailedProduct').val() == '') || (gReqCallouts[selProdCat] == null)) {
                    // element header rows
                    $('#productFilterTH').addClass('hidden');
                    $('#osreIdTH').addClass('hidden');
                    $('#addressCheckBoxTH').addClass('hidden');
                    $('#availableAddressListTH').addClass('hidden');
                    // elements
                    $('#avblChksTD').addClass('hidden');
                    $('#postCodeTD').addClass('hidden');
                    $('#osreIdTD').addClass('hidden');
                    $('#addressCheckBoxTD').addClass('hidden');
                    $('#availableAddressListTD').addClass('hidden');
                    // reset values of input fields to blank
                    $('#postCode').val('');
                    $('#osreId').val('');
                    // reset list of addresses
                   resetBTAddressHolder();
                } else {
                    // for others display fields as required
                    $('#productFilterTH').removeClass('hidden');
                    $('#osreIdTH').removeClass('hidden');
                    $('#addressCheckBoxTH').removeClass('hidden');
                    $('#availableAddressListTH').removeClass('hidden');
                    // elements
                    $('#osreIdTD').removeClass('hidden');
                    $('#addressCheckBoxTD').removeClass('hidden');
                    $('#availableAddressListTD').removeClass('hidden');
                    // filter av. check checkboxes
                    $('#avblChksTD').removeClass('hidden');
                    
                    // window.console.log(selProdCat);
                    // window.console.log(gReqCallouts[selProdCat]);
                    // enable only required checkbox-es
                    $('#avblChks div').css('display', 'none');
                    for(var i = 0; i < gReqCallouts[selProdCat].length; i++) {
                        var propId = getAvCheckId(gReqCallouts[selProdCat][i].calloutServiceName);
                        if (!gReqCallouts[selProdCat][i].isCalloutMandatory) {
                            $('#' + propId).prop('disabled', false);
                        }
                        $('#' + propId).prop('checked', 'checked');
                        $('#avCheckDiv' + gReqCallouts[selProdCat][i].calloutServiceName).css('display', '');
                    }
                    showHideEADRequestType($('#avCheckEAD'));
                    $('#avblChkAll').prop('checked', 'checked');
                }
            }
            
            /**
             * function performs select all functionality
             *
             * @param fldSetId id of fieldset that is container element for checkboxes
             * @param selAllId id of 'select all' checkbox element
             * @param selMeClass id of class that identifies which element are part of select all group, should be selected/deselected
             */
            function selectDeselectAll(fldSetId, selAllId, selMeClass){
                $('#'+fldSetId).children('.'+selMeClass).each(function () {
                        //window.console.log($('#'+selAllId).prop('checked'));
                        // only for enabled ones
                        if (!$(this).prop('disabled')) {
                            $(this).prop('checked', $('#'+selAllId).prop('checked'));
                        }
                    });
            }
            
            /**
             * function returns only text contained within the element, without child elements
             *
             * @elem element for which text is required
             * @return text within elem HTML element, without child elements
             */
            function returnElementText(elem){
                return elem.clone()  // clone the element
                           .children()  // select all the children
                           .remove()  // remove all the children
                           .end() // again go back to selected element
                           .text(); // get the text of element
            }
            
            /* overlay -------------------------- start */
            
            function handleGetConfigurationMapperFieldsResponse (result, event) {
                // window.console.log(result);
                if (event.type === 'exception') {
                    growlNow('Callout map list' + event.message);
                } else {
                    calloutFieldMapper = JSON.parse(result);
                    // if nothing returned add something to the object so that object is not empty
                    // during session
                    if ($.isEmptyObject(calloutFieldMapper)) {
                        calloutFieldMapper.empty = 'Yes';
                    }
                }
            }
            
            
            /**
             * function show ProdConfRequestApprovalHistory page with approval history for selected product configuration request
             *
             * @param pcrId product configuration request Id
             */
            function showApprovalHistory(pcrId) {
                var appHistoryDiv = '<div>\n';
                appHistoryDiv = appHistoryDiv + '<div class="closeDivImg"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'close.png')}" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>\n';
                appHistoryDiv = appHistoryDiv + '<div class="overflowTableWrap">';
                //
                var link = '/apex/ProdConfRequestApprovalHistory?id=' + pcrId;
                var iFrame = '<iframe id="approvalHistoryIFrame" src="'+link+'"></iframe>\n';
                //
                appHistoryDiv = appHistoryDiv + iFrame + '\n';
                appHistoryDiv = appHistoryDiv + '</div></div>\n';
                //
                showOverlayedItem(appHistoryDiv, '.overflowTableWrap', 45);
                $("#processing_overlay").click(function () {
                    hideOverlayedItem();
                });
                // apply styling to iframe because styles are not renderd correctly in the table
                $('#approvalHistoryIFrame').load(function(){
                    $(this).contents().find('body').css({backgroundColor: '#FCF8F8'});
                    $(this).contents().find('tr.extraRow').css({backgroundColor: '#8E9DBE'});
                });
            }
            
            /**
             * function invokes remote action that will format callout details that will be displayed to the user
             *
             * @param elem element that invokes modal style dialog function
             */
            function showCalloutDetails(elem) {
                var prodConfReqId = elem.parent().parent().prop('id');
                var attachment = gConfReqAtt[prodConfReqId];
                
                // window.console.log('displaying attachment...');
                // window.console.log(attachment);
                if (attachment.callouts === undefined) {
                    growlNow('Callout details information unavailable.');
                    return;
                }
                
                blockScreenElement('.manageBasketProducts');
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.formatCalloutDetails}',
                            JSON.stringify(attachment),
                            handleFormatCalloutDetailsResponse,
                            {escape: false}
                        );
               
            }
            
            /**
             * function handles response from remote action formats data to be displayed on the screen
             * draws 'modal dialog style' div with information about callout results for each individual callout
             *
             * @param result JSON string that holds list of formated fields that will be displayed to the user
             * @param event holds infromation about returning event
             */
            function handleFormatCalloutDetailsResponse(result, event) {
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    var JSONcalloutData = JSON.parse(result);
                    var tempStr;
                    //
                    var calloutDiv = '<div>\n';
                    calloutDiv = calloutDiv + '<div class="closeDivImg"><img src="{!URLFOR($Resource.BasketBuilderIcons, 'close.png')}" onclick="hideOverlayedItem()" title="Close" class="iconStyle16"/></div>\n';
                    calloutDiv = calloutDiv +   '<div class="overflowTableWrap"><table id="calloutDetailsTable">';
                

                  
                    for (var i = 0; i < JSONcalloutData.length; i++) {
                        calloutDiv = calloutDiv + '<tr class="calloutHeaderRow">\n';
                        calloutDiv = calloutDiv + '<td>Service: ' + JSONcalloutData[i].callout + '</td>';
                        calloutDiv = calloutDiv + '<td>Method: ' + JSONcalloutData[i].method + '</td>';
                        tempStr = JSONcalloutData[i].status == null ? '' : defineText(JSONcalloutData[i].status);
                        calloutDiv = calloutDiv + '<td>Status: ' + tempStr + '</td>';
                        calloutDiv = calloutDiv + '</tr>\n';
                        // print fields
                        tempStr = JSONcalloutData[i].code == null ? '' : defineText(JSONcalloutData[i].code);
                        calloutDiv = calloutDiv + '<tr><td style="padding-left: 40px; font-weight:normal; padding-top:3px;">Code:</td><td colspan="2" style="font-weight:normal;padding-top:3px;">' + tempStr + '</td>\n</tr>\n';
                        tempStr = JSONcalloutData[i].displayMessage == null ? '' : defineText(JSONcalloutData[i].displayMessage);
                        calloutDiv = calloutDiv + '<tr><td style="padding-left: 40px; font-weight:normal; padding-bottom:5px;">Message:</td><td colspan="2" style="font-weight:normal;padding-bottom:5px;">' + tempStr + '</td>\n</tr>\n';
                        //
                        for (var j in JSONcalloutData[i].fields) {
                            calloutDiv = calloutDiv + '<tr><td style="padding-left: 40px; font-weight:normal;">' + j + '</td><td colspan="2" style="font-weight:normal;">' + JSONcalloutData[i].fields[j] + '</td></tr>';
                        }
                    }
                    calloutDiv = calloutDiv + '</table></div>';
                    calloutDiv = calloutDiv + '</div>';
                    
                    $('.manageBasketProducts').unblock();
                    
                    showOverlayedItem(calloutDiv, '.overflowTableWrap', 45);
                    $("#processing_overlay").click(function () {
                        hideOverlayedItem();
                    });
                }
            }
            
                                      
            /**
             * function draws 'modal dialog style' IFrame on top of page, configuration edit page
             *
             * @param elem element that invokes modal style dialog function
             * @param prodConfId product configuration Id
             */
            function prodConfigEditIFrame(elem, prodConfId) {
                var tempStr;
                var url = window.location.toString();
                var context;
                
                gProdConfReqId = elem.parent().parent().prop('id');
                gProdConfId = prodConfId;

                var iFrameDiv = '<div>\n<table  cellspacing="0" cellpadding="0" border="0" width="100%" style="margin-bottom:5px; border-bottom:1px solid; padding-bottom:5px;">';
                iFrameDiv = iFrameDiv + ' <tr class="headerRow"><td>Product Category</td><td>Phone Number</td><td>EASY Address</td><td>Offer Selected</td><td><a href="#" onclick="hideOverlayedItem();updateProdConfReq(gProdConfReqId);return false;">Close</a></td></tr>';
                iFrameDiv = iFrameDiv + '<tr class="dataRow">';
                iFrameDiv = iFrameDiv + '<td class="dataCell">'+elem.parent().parent().children('.productCategory').html()+'</td>';
                //
                tempStr = returnElementText(elem.parent().parent().children('.osreId'));
                if (tempStr == null) {
                    tempStr = '';
                }
                iFrameDiv = iFrameDiv + '<td class="dataCell">'+tempStr+'</td>';
                //
                tempStr = returnElementText(elem.parent().parent().children('.BTAddress'));
                window.console.log(tempStr);
                if (tempStr == null) {
                    tempStr = '';
                }
                iFrameDiv = iFrameDiv + '<td class="dataCell">'+tempStr+'</td>';
                //
                iFrameDiv = iFrameDiv + '<td class="dataCell">' + returnElementText(elem.parent().parent().children('.offer')) +'</td>';
                iFrameDiv = iFrameDiv + '</tr></table>';
                // hidden input field containing currently edited product configuration
                iFrameDiv = iFrameDiv + '<input type="hidden" value="' + prodConfId + '" id="editedProdConfId" />';
                
                context = sitePrefix;
                
                link = context + '/cscfga__ConfigureProduct?linkedId={!cscfga__Product_Basket__c.Id}&configId='+prodConfId+'&retURL=/{!cscfga__Product_Basket__c.Id}&isdtp=vw';
                var iFrame = '<iframe id="configurationEditIFrame" src="'+link+'"></iframe>\n';
                iFrameDiv = iFrameDiv + iFrame + '<\div>';
                showOverlayedItem(iFrameDiv, '#configurationEditIFrame', 55);
                /*
                $("#processing_overlay").click(function () {
                    hideOverlayedItem();
                });
                */
            }
            
            /**
             * function displayes item as overlay on the screen, used to block underlying page while showing item on top
             *
             * @param displayText HTML that should be displayes as overlayed item
             * @param dataContainer real container that holds the data, can be any HTML selector (#id, .class, ...)
             * @param heightOffset data container height = processing_container.height - heightOffset
             */
            function showOverlayedItem(displayText, dataContainer, heightOffset) {
                hideOverlayedItem();
                jQuery("BODY").append('<div id="processing_overlay" class="wholeOverlay"></div>');
                    jQuery("BODY").append(
                      '<div id="processing_container"><div id="processing_content" style="height:100%">' + displayText + '</div></div>');
                var pos = 'fixed';
                // maximum -> preferred height is 690px, if window is smaller resize to window height - 20
                var containerHeight = $(window).height() < 690 ? $(window).height() - 20 : 690;
                jQuery("#processing_container").css({
                    position: pos,
                    zIndex: 99999,
                    height: containerHeight + 'px',
                    padding: 0,
                    margin: 10
                });
                // set size for inner data container
                if (dataContainer !== undefined) {
                    jQuery(dataContainer).css({
                        height: (containerHeight - heightOffset) + 'px'
                    });
                }
                
                jQuery("#processing_container").css({
                    minWidth: jQuery("#processing_container").outerWidth(),
                    maxWidth: jQuery("#processing_container").outerWidth()
                });
                  
                var top = ((jQuery(window).height() / 2) - (jQuery("#processing_container").outerHeight() / 2)) + (-75);
                var left = ((jQuery(window).width() / 2) - (jQuery("#processing_container").outerWidth() / 2)) + 0;
                if( top < 0 ) top = 0;
                if( left < 0 ) left = 0;
                
                jQuery("#processing_container").css({
                    top: top + 'px',
                    left: left + 'px'
                });
                jQuery("#processing_overlay").height( jQuery(document).height() );
            }
            
            /**
             * function hides overlayed item and returns focus to the page, overlayed item has to be contained within
             * processing_container and processing_overlay items (shown with showOverlayedItem)
             *
             */
            function hideOverlayedItem() {
                jQuery("#processing_container").remove();
                jQuery("#processing_overlay").remove();
            }
            /* overlay -------------------------- end */
            
            /**
             * creates function that horizontaly centers invoking element on the screen
             *
             */
            jQuery.fn.center = function () {
                this.css("top", Math.max(0,$(window).scrollTop()) + "px");
                this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) +
                                                            $(window).scrollLeft()) + "px");
                return this;
            }
            
            /**
             * function centers entryPanelContainer element on the screen
             *
             */
            function centerScreen() {
                if(jQuery('#entryPanelContainer') != null)
                    jQuery('#entryPanelContainer').center();
            }

            /**
             * function refreshes av. check status cell with information from av. check results
             *
             * @param prodConfReqId prodct configuration Id that is being refreshed
             * @param avCheckResults result of the avaliability check that will be displayed to the user
             */
            function refreshAvCheckStatusCell (prodConfReqId, avCheckAttachment) {
                var avCheckStatusCellId = getAvCheckStatusCellId(prodConfReqId);
                var avCheckCellContent;
                
                window.console.log('refreshing status cell: ' + avCheckStatusCellId);
                window.console.log(avCheckAttachment);
                
                //$('#' + avCheckStatusCellId).children().remove();
                
                if (avCheckAttachment !== undefined) {
                    avCheckCellContent = '<img src="{!URLFOR($Resource.BasketBuilderIcons, 'Information_blue.png')}" title="Show avaliability check details." class="iconStyle16" onClick="showCalloutDetails($(this));"/>';
                } else {
                    avCheckCellContent = '<img src="{!URLFOR($Resource.BasketBuilderIcons, 'Information_grey.png')}" title="Avaliability check not completed." class="iconStyle16" />';
                }
                
                window.console.log(avCheckCellContent);
                return avCheckCellContent;
                //$('#' + avCheckStatusCellId).append(avCheckCellContent);
            }
            
            /* DOM element Id formating functions -------------------- start */
            function getAvCheckStatusCellId(prodConfReqId) {
                return prodConfReqId + '-avCheckStatusCell';
            }
            //
            function getAvCheckId(avCheckName) {
                return 'avCheck' + avCheckName;
            }
            //
            function getAttSelId(prodConfId) {
                return 'attSel-' + prodConfId;
            }
            //
            function getPcAttsId(prodConfId) {
                return 'pcAtts-' + prodConfId;
            }
            //
            function getProdConfDetsId(prodConfReqId) {
                return 'pcDet-' + prodConfReqId;
            }
            //
            function getOfferCalloutCellId(prodConfReqId) {
                return 'callout-' + prodConfReqId;
            }
            //
            function getOfferCellId(prodConfReqId) {
                return 'offer-' + prodConfReqId;
            }
            //
            function getCommericalApprovalCommentId(prodConfReqId) {
                return 'commAppCmnt-' + prodConfReqId;
            }
            /* DOM element Id formating functions -------------------- end   */
        
            /* avaliablity check functions -------------------- start */
            /**
             * function adds product configuration request to active callout list
             *
             * @param calloutReq request that is being added to the list
             */
            function addToCalloutCheckList(calloutReq) {
                // add request to list of required callout checks
                window.console.log(calloutReq);
                window.console.log(activeCalloutChecks);
                for (var i = 0; i < calloutReq.length; i++) {
                    window.console.log(i + ' -> ' + calloutReq[i]);
                    // TODO : fix activeCalloutChecks object assignments
                    activeCalloutChecks[calloutReq[i]] = calloutReq[i];
                }
                
                window.console.log(activeCalloutChecks);
                window.console.log(JSON.stringify(activeCalloutChecks));
                
                // if check interval has not been started, start interval
                if (checkIntervalId == null) {
                    checkIntervalId = window.setInterval(getCalloutRequestStatus, checkInterval);
                    window.console.log('created interval id:' + checkIntervalId);
                }
                
            }
            
            /**
             * function deletes callout check request form list of active callout checks
             *
             * @param deleteList list of items that should be delete from the list
             */
            function deleteFromCalloutCheckList(deleteList) {
                //window.console.log('deleting from callout checks...' + deleteList.length);

                //for (var key in activeCalloutChecks) {
                //    window.console.log('Keys:' + key);
                //}


                for (i in deleteList){
                    // window.console.log('deleting from callout checks...' + deleteList[i] + ':' + activeCalloutChecks[deleteList[i]]);
                    if (activeCalloutChecks.hasOwnProperty(deleteList[i])) {
                        delete activeCalloutChecks[deleteList[i]];
                        window.console.log('deleted...' + activeCalloutChecks[deleteList[i]]);
                    }
                }
                
                // stop check interval if activeCalloutChecks object is empty and check exists
                if ($.isEmptyObject(activeCalloutChecks) && checkIntervalId != null) {
                    window.console.log('clearing interval after delete...');
                    clearInterval(checkIntervalId);
                    checkIntervalId = null;
                }
            }
            
            /**
             * function invokes remote action that returns status of active callouts form the controller
             *
             */
            function getCalloutRequestStatus() {
                // stop interval during check
                if (checkIntervalId != null) {
                    window.console.log('stopped interval id:' + checkIntervalId);
                    clearInterval(checkIntervalId);
                }

                // window.console.log(activeCalloutChecks);
                // window.console.log(JSON.stringify(activeCalloutChecks));
                
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.getCalloutRequestStatus}',
                            JSON.stringify(activeCalloutChecks),
                            handleGetCalloutRequestStatusResponse,
                            {escape: false}
                        );
            }
            
            /**
             * function handles response from callout status check, if check is completed/failed then corresponding element on the screens gets
             * refreshed (if completed then list of available offers is prepared for the end user, if failed status icon gets refreshed telling
             * the user that check has failed
             *
             * @param result holds JSON representation availability check batch job status
             * @param event holds infromation about returning event
             */
            function handleGetCalloutRequestStatusResponse(result, event) {
                window.console.log(result + 'remaining requests:' + activeCalloutChecks);
                var offerCell = '';
                var offerCellId;
                var productCategoryId;
                var reqSts = JSON.parse(result);
                var confReqId;
                var avCheckStatusCellId;
                var avCheckCellContent;
                
                //window.console.log(reqSts);
                //window.console.log(reqSts.prodConfReqs);
                 window.console.log('activeCalloutChecks before delete...');
                 window.console.log(activeCalloutChecks);
                 //window.console.log('activeCalloutChecks before delete...' + Object.getOwnPropertyNames(activeCalloutChecks).length);
                 // window.console.log('activeCalloutChecks before delete...' + Object.getOwnPropertyNames(activeCalloutChecks)[0]);
                for (var i = 0; i < reqSts.prodConfReqs.length; i++) {
                    // if status of all callouts is Success or Fail change status of record in product basket
                    // show available offer icon in record
                    confReqId = reqSts.prodConfReqs[i].configReqId;
                    window.console.log('request id -> ' + i + ' ' + confReqId);
                    window.console.log('status -> ' + i + ' '+ reqSts.prodConfReqs[i].status);
                    if (reqSts.prodConfReqs[i].status == 'Success'
                        || reqSts.prodConfReqs[i].status == 'Fail') {
                        // delete it form the list
                        if (activeCalloutChecks.hasOwnProperty(confReqId)) {
                            window.console.log('deleting...' + confReqId);
                            delete activeCalloutChecks[confReqId];
                        }
                        
                        window.console.log(reqSts.prodConfReqs[i]);
                        // add attachment to the global Attachment list
                        gConfReqAtt[confReqId] = reqSts.prodConfReqs[i];
                        if (reqSts.EADResponses !== undefined && reqSts.EADResponses[confReqId] !== undefined){
                            gConfReqEADAtt[confReqId] = reqSts.EADResponses[confReqId];
                        }
                        offerCellId = '#' + getOfferCalloutCellId(confReqId);
                        // if element has not been procesed by another handleGetCalloutRequestStatusResponse
                        if ($(offerCellId).length > 0) {
                            // show changed icon on the screen
                            // decode product category id used for getAvailableOffers from img child element
                            // id is formed as img-prodConfReqId-productCategoryId
                            window.console.log('processing callout response...' + offerCellId);
                            productCategoryId = $(offerCellId).children('img').attr('id');
                            productCategoryId =  productCategoryId.substring(productCategoryId.lastIndexOf('-') + 1);
                            //
                            $(offerCellId).empty();
                            if (activeCloneJobs.hasOwnProperty(confReqId)) {
                                offerCell = '<img src="{!URLFOR($Resource.BasketBuilderIcons, 'processing_7.gif')}" class="iconStyle24height" alt="Waiting for Cloning" title="Waiting for Cloning" />';
                            }
                            else {
                                offerCell = '<img src="{!URLFOR($Resource.BasketBuilderIcons, 'availableOffers32.png')}" class="iconStyle24 avOffersImg" alt="Available offers" title="Available offers"  onclick="showAvailableOffers(\'' + confReqId + '\', \''+productCategoryId+'\');" />\n';
                            }
                            $(offerCellId).append(offerCell);
                            // change id of the cell to notify that cell now contains an offer
                            $(offerCellId).prop('id', getOfferCellId(confReqId));
                            // refresh and create avCheckStatusCell results
                            avCheckStatusCellId = getAvCheckStatusCellId(confReqId);
                            $('#' + avCheckStatusCellId).children().remove();
                            avCheckCellContent = refreshAvCheckStatusCell(confReqId, 'Y');
                            $('#' + avCheckStatusCellId).append(avCheckCellContent);
                        }
                    }
                }
                
                window.console.log('activeCalloutChecks after delete...' + activeCalloutChecks);
                //if object is not empty start another check interval, else set checkIntervalId to null
                if (!$.isEmptyObject(activeCalloutChecks)) {
                    // if list contains acitve check requests start interval
                    checkIntervalId = window.setInterval(getCalloutRequestStatus, checkInterval);
                    window.console.log('created interval id:' + checkIntervalId);
                } else {
                    window.console.log('object is empty');
                    checkIntervalId = null;
                }
            }
            
            // ****************************************************************
            // ****************************************************************
            // ****************************************************************
            // ****************************************************************
            // ****************************************************************
            function deleteFromCloneCheckList(deleteList) {
                for (i in deleteList){
                    if (activeCloneJobs.hasOwnProperty(deleteList[i])) {
                        delete activeCloneJobs[deleteList[i]];
                        window.console.log('deleted...' + activeCloneJobs[deleteList[i]]);
                    }
                }
                
                // stop check interval if activeCloneJobs object is empty and check exists
                if ($.isEmptyObject(activeCloneJobs) && cloneIntervalId != null) {
                    window.console.log('clearing clone interval after delete...');
                    clearInterval(cloneIntervalId);
                    cloneIntervalId = null;
                }
            }
            
            function getCloneRequestStatus() {
                // stop interval during check
                if (cloneIntervalId != null) {
                    window.console.log('stopped interval id:' + cloneIntervalId);
                    clearInterval(cloneIntervalId);
                }
                
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.getBatchCloningStatus}',
                            JSON.stringify(activeCloneJobs),
                            handleGetBatchCloningResponse,
                            {escape: false}
                        );
            }
            
            function handleGetBatchCloningResponse(result, event) {
                window.console.log(result + 'remaining requests:' + activeCloneJobs);
                var cloneSts = JSON.parse(result);
                
                window.console.log('activeCloneJobs before delete...');
                window.console.log(activeCloneJobs);
                //window.console.log('activeCloneJobs before delete...' + Object.getOwnPropertyNames(activeCloneJobs).length);
                // window.console.log('activeCloneJobs before delete...' + Object.getOwnPropertyNames(activeCloneJobs)[0]);
                for (var pcrId in activeCloneJobs) {
                    if (cloneSts[pcrId] == 'Completed') {
                        // delete it form the list
                        window.console.log('deleting from clone queue...' + pcrId);
                        delete activeCloneJobs[pcrId];
                    }
                }
                
                window.console.log('activeCloneJobs after delete...' + activeCloneJobs);
                //if object is not empty start another check interval, else set checkIntervalId to null
                if (!$.isEmptyObject(activeCloneJobs)) {
                    // if list contains acitve check requests start interval
                    cloneIntervalId = window.setInterval(getCloneRequestStatus, cloneInterval);
                    window.console.log('created interval id:' + cloneIntervalId);
                } else {
                    window.console.log('object is empty');
                    cloneIntervalId = null;
                }
                
                refreshBasketContent();
            }
            
            /**
             * function invokes remote action that Syncs the basket with the opportunity
             *
             * @param prodConfReq
             * @param prodConfId
             *
             */
            function syncBasketWithOpportunity(){
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
               
                Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CSBasketBuilderEController.syncWithOpportunity}',
                            '{!cscfga__Product_Basket__c.Id}',
                            handleSyncBasketWithOpportunityResponse,
                            {escape: false}
                        );
            }
            
            /**
             * function handles syncBasketWithOpportunity response
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleSyncBasketWithOpportunityResponse(result, event){
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
                                
                if (event.type === 'exception') {
                    growlNow(event.message);
                } else {
                    growlNow('Basket Synchronised with Opportunity');
                }
                
                /// [ZD]
                window.open(result,"_self");
            }
            /* avaliablity check functions -------------------- end */
         
            /* file upload functions --------------------------- start */
            var maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
            var maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
            var chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 characters
            var attachment;
            var attachmentName;
            var fileSize;
            var positionIndex;
            var doneUploading;
       
            //Method to prepare a file to be attached
            function uploadFile(prodConfId) {
                var attSelId = getAttSelId(prodConfId);
                var file = document.getElementById(attSelId).files[0];
                window.console.log(file);
                if(file != undefined) {
                    if(file.size <= maxFileSize) {
                        attachmentName = file.name;
                        var fileReader = new FileReader();
                        fileReader.onloadend = function(e) {
                            attachment = window.btoa(this.result);  //Base 64 encode the file before sending it
                            positionIndex=0;
                            fileSize = attachment.length;
                            console.log("Total Attachment Length: " + fileSize);
                            doneUploading = false;
                            if(fileSize < maxStringSize) {
                                uploadAttachment(null, prodConfId);
                            } else {
                                alert("Base 64 Encoded file is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + ".");
                            }
                        }
                        fileReader.onerror = function(e) {
                            alert("There was an error reading the file.  Please try again.");
                        }
                        fileReader.onabort = function(e) {
                            alert("There was an error reading the file.  Please try again.");
                        }
                        fileReader.readAsBinaryString(file);  //Read the body of the file
                    } else {
                        alert("File must be under 4.3 MB in size.  Your file is too large.  Please try again.");
                    }
                } else {
                    alert("You must choose a file before trying to upload it");
                }
            }
         
            //Method to send a file to be attached
            //Sends parameters: Product configuration Id, Attachment (body), Attachment Name, and the Id of the Attachment if it exists to the controller
            function uploadAttachment(fileId, prodConfId) {
                var attachmentBody = "";
                if(fileSize <= positionIndex + chunkSize) {
                    attachmentBody = attachment.substring(positionIndex);
                    doneUploading = true;
                } else {
                    attachmentBody = attachment.substring(positionIndex, positionIndex + chunkSize);
                }
                console.log("Uploading " + attachmentBody.length + " chars of " + fileSize);
          
                CSBasketBuilderEController.doUploadAttachment(
                    prodConfId,
                    attachmentBody,
                    attachmentName,
                    fileId,
                    function(result, event) {
                        console.log('attachment id : ' + result);
                        if(event.type === 'exception') {
                            console.log("exception");
                            console.log(event);
                        } else if(event.status) {
                            if(result.substring(0,3) == '00P') {
                                if(doneUploading == true) {
                                    growlNow('File uploaded!');
                                    $('#' + getPcAttsId(prodConfId)).append(createAttachmentRow(prodConfId, result, attachmentName));
                                } else {
                                    positionIndex += chunkSize;
                                    uploadAttachment(result, prodConfId);
                                }
                           }
                        } else {
                            console.log(event.message);
                        }
                    },
                    {buffer: true, escape: true, timeout: 120000}
                );
            }
                
            function appendAttachmentList(prodConfId, attList) {
                /// [ZD]
                return '';
                /// [ZD]
                
                var retHTML;
                var attSelId = getAttSelId(prodConfId);
                var pcAttsId = getPcAttsId(prodConfId);
                 
                retHTML = '<div class="attachmentContainer">\n';
                retHTML = retHTML + '<table class="attachmentList list" id="' + pcAttsId + '">\n';
                retHTML = retHTML + '<tr class="headerRow">\n';
                retHTML = retHTML + '<td class="iconColumn"></td><td>File Name</td></tr>\n';
                retHTML = retHTML + '<tr><td></td><td><input type="file" id="' + attSelId +'"/><input type="button" value="Upload" class="btn attUploadBtn" onclick="uploadFile(\'' + prodConfId + '\')" /></td></tr>\n';
                // window.console.log('--------------->' + attList);
                // window.console.log(attList);
                if (attList !== undefined) {
                    for (var i = 0; i < attList.length; i++) {
                        retHTML = retHTML + createAttachmentRow(prodConfId, attList[i].attId, attList[i].attName);
                    }
                }
                //
                retHTML = retHTML + '</table></div>\n';
                return retHTML;
            }
    
            function createAttachmentRow(prodConfId, attId, attName) {
                var attRow;
                // URL for the file servlet is hardcoded
                var fileServletURL = '/servlet/servlet.FileDownload?file=';
                     
                attRow = '<tr id="' + attId + '"><td><img src="{!URLFOR($Resource.BasketBuilderIcons, 'Close_Box_Red.png')}" title="Delete file." class="iconStyle16 delAttachmentImg" onClick="deleteAttachment(\'' + attId + '\')" /></td>\n';
                attRow = attRow + '<td><a href="' + fileServletURL + attId + '">' + attName + '</a></td></tr>\n';
                 
                // append row to the attachment list
                return attRow;
            }
            
            function deleteAttachment(attId) {
                if (confirm('Are you sure you want to delete attachment?')) {
                    Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.CSBasketBuilderEController.deleteAttachment}',
                                attId,
                                handleDeleteAttachmentResponse,
                                {escape: false}
                            );
                }
            }
    
            function handleDeleteAttachmentResponse(result, event) {
                // result contains Id of deleted attachment
                if (event.type === 'exception') {
                    growlNow('Delete attachment exception: ' + event.message);
                } else {
                    $('#' + result).remove();
                    growlNow('File deleted.');
                }
            }
            /* file upload functions --------------------------- end */

            /* billing section edit functions --------------------------- start */
            /**
             * function restores Billing information prior to Edit operation
             *
             * @param
             * @param
             */
            function cancelBillingSetupEdit() {
                // restore values before edit initiated
                var currBillSetup = currentBillingSetup['currentSetup'];
                var addToExisting = 'Add To Existing Structure';
                var createNewBillAcc = 'Create New Account';
                var unknownStructure = 'Unknown/Complex Structure';
                var idPrefix = 'p\\:b\\:BasketHeaderSection\\:billingDetails\\:';
                //
                $('#' + idPrefix + 'billingDetailsSetupEdit\\:billingSetup').val(currBillSetup);
                //
                switch(currBillSetup) {
                    case addToExisting:
                        elemId = '#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount';
                        $(elemId).val(currentBillingSetup[elemId]);
                        elemId = '#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount_lkid';
                        $(elemId).val(currentBillingSetup[elemId]);
                        break;
                    case createNewBillAcc:
                         for (var j in currentBillingSetup) {
                             if (j != 'currentSetup') {
                                 $('#' + j).val(currentBillingSetup[j]);
                                 //window.console.log(j + '-->' + currentBillingSetup[j]);
                             }
                         }
                        break;
                    case unknownStructure:
                        elemId = '#' + idPrefix + 'unknownBillingStructureEdit\\:complexBillingStructureArea';
                        $(elemId).val(currentBillingSetup[elemId]);
                        break;
                default:
                }
                changeBillingSetupOption();
                changePaymentMethod();
                //
                enableBillingSetupChange();
            }
            
            
            /**
             * function validates billing setup information and saves product basket
             */
            function saveProdBasket() {
                // perform a click event on body in order to defocus any inlineedit fields (Safari is special)
                if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
                    var a = $('body')[0];
                    var evObj = document.createEvent('MouseEvents');
                    evObj.initMouseEvent('click', true, true, window);
                    a.dispatchEvent(evObj);
                }
                else {
                    $('body').click();
                }
                // for all baskets validate billing setup
                gpcaBankAccountValidation.returningFunction = 'saveProdBasket';
                if (validateBillingSetupChange()) {
                    saveProdBasketAction();
                }
            }

            /**
             * function validates and saves billing setup information for existing product baskets
             *
             */
            function saveBillingSetupChange() {
                // if billing setup is valid save product basket
                gpcaBankAccountValidation.returningFunction = 'saveBillingSetupChange';
                if (validateBillingSetupChange()) {
                    saveBillingSetupChangeAction();
                    //
                    enableBillingSetupChange();
                }
            }
            
            /* function handles validation response of bank account information during billing setup change
             * save action. It goes through whole save/validation process once more after response has been received
             *
             */
            function handlePCABankAccountValidationResponse(response) {
                gpcaBankAccountValidation.isCompleted = true;
                // window.console.log('pcaValidation completed...' + gpcaBankAccountValidation.isCompleted);
                gpcaBankAccountValidation.isCorrect = response[0].IsCorrect;
                // go back and revalidate results
                switch(gpcaBankAccountValidation.returningFunction) {
                    case "saveProdBasket":
                        saveProdBasket();
                        break;
                    case "saveBillingSetupChange":
                         saveBillingSetupChange();
                         break;
                    default:
                        growlNow('Unhandled BasketBuilder PCA validation returning function.');
                }
            };
            
            /**
             * function validates billing setup changes
             *
             * @return false if billing setup information is invalid, false otherwise
             */
            function validateBillingSetupChange() {
                // non standard users do not see billing setup information and validation is not required
                // {!IsStandardUser}
                if ({!not IsStandardUser}) {
                    return true;
                }
                var addToExisting = 'Add To Existing Structure';
                var createNewBillAcc = 'Create New Account';
                var unknownStructure = 'Unknown/Complex Structure';
                var basketHeaderId = '{!cscfga__Product_Basket__c.Id}' == '' ? 'NewBasketHeaderSection' : 'BasketHeaderSection';
                var idPrefix = 'p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:';
                var billingSetupValid = true;
                var currBillSetup = $('#' + idPrefix + 'billingDetailsSetupEdit\\:billingSetup').val();
                
                switch(currBillSetup) {
                    case addToExisting:
                        // if value of hidden id input field is empty then do not allow record to get saved
                        if ($('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount_lkid').val() == '') {
                            growlNow('Please provide valid Subscription Account.');
                            billingSetupValid = false;
                        }
                        break;
                    case createNewBillAcc:
                        var BCLookupId = $('#' + idPrefix + 'newBillingAccountEdit\\:BCLookup_lkid').val();
                        // if ID is 000000000000000 this is invalid ID
                        while(BCLookupId.charAt(0) === '0')
                            BCLookupId = BCLookupId.substr(1);
                        if (BCLookupId == '') {
                            growlNow('Please provide Billing Contact.');
                            billingSetupValid = false;
                        }
                        if ($('#' + idPrefix + 'newBillingAccountEdit\\:BABuildingNameNumber').val() == '') {
                            growlNow('Please provide Building Name/Number.');
                            billingSetupValid = false;
                        }
                        if ($('#' + idPrefix + 'newBillingAccountEdit\\:BAPostcode').val() == '') {
                            growlNow('Please provide Post Code.');
                            billingSetupValid = false;
                        }
                        if ($('#' + idPrefix + 'newBillingAccountEdit\\:BCPaymentMethod').val() == '') {
                            growlNow('Please provide Payment Method.');
                            billingSetupValid = false;
                        }
                        if ($('#' + idPrefix + 'newBillingAccountEdit\\:BCPaymentMethod').val() == 'Direct Debit') {
                            if ($('#' + idPrefix + 'newBillingAccountEdit\\:bankAccNumber').val() == '' ||
                                $('#' + idPrefix + 'newBillingAccountEdit\\:bankSortCode').val() == '' ) {
                                growlNow('Bank Account Number and Bank Sort Code are mandatory fields for Direct Debit payment method.');
                                billingSetupValid = false;
                            }
 
                            if (gpcaBankAccountValidation.isCompleted) {
                                gpcaBankAccountValidation.isCompleted = false;
                            } else {
                                pca.fetch("BankAccountValidation/Interactive/Validate/v2.00",
                                                       { key: pca.editpage.settings.StandardKey
                                                       , sortcode: $('#' + idPrefix + 'newBillingAccountEdit\\:bankSortCode').val()
                                                       , accountnumber: $('#' + idPrefix + 'newBillingAccountEdit\\:bankAccNumber').val()
                                                       }
                                                  , handlePCABankAccountValidationResponse);
                                // window.console.log('performing PCA validation...');
                                // return and wait for ws response to get handled
                                return false;
                            }
                            
                            // this is old code that only checks if error message exists returned from onchange event
                            // var errorMsgText = $('#' + idPrefix + 'newBillingAccountEdit\\:bankAccNumber').parent().children('.errorMsg').text();
                            // if (errorMsgText.length > 0) {
                            if (! gpcaBankAccountValidation.isCorrect) {
                                growlNow('Invalid Bank Account Number/Bank Sort Code. Please review error message below.');
                                billingSetupValid = false;
                            }
                        }
                        break;
                    case unknownStructure:
                        if ($('#' + idPrefix + 'unknownBillingStructureEdit\\:complexBillingStructureArea').val() == '') {
                            growlNow('Please provide value for unknown/complex structure.');
                            billingSetupValid = false;
                        }
                        break;
                    default:
                        // issue-103248
                        // growlNow('Please provide value for Billing Setup');
                        // billingSetupValid = false;
                }
                return billingSetupValid;
            }
            
            /**
             * function displays or hides selected billing option fields on the screen
             *
             */
            function changeBillingSetupOption() {
                var basketHeaderId = '{!cscfga__Product_Basket__c.Id}' == '' ? 'NewBasketHeaderSection' : 'BasketHeaderSection';
                var currBillSetup = $('#p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:billingDetailsSetupEdit\\:billingSetup').val();
                var addToExisting = 'Add To Existing Structure';
                var createNewBillAcc = 'Create New Account';
                var unknownStructure = 'Unknown/Complex Structure';
    
                window.console.log(currBillSetup);
                // fix output panel by Id
                var idPrefix = 'p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:';
                
                // hide display blocks
                $('#' + idPrefix + 'existingBillingAccount').addClass('hidden');
                $('#' + idPrefix + 'newBillingAccount').addClass('hidden');
                $('#' + idPrefix + 'unknownBillingStructure').addClass('hidden');
                //
                $('#' + idPrefix + 'billingDetailsSetup').addClass('hidden');
                $('#' + idPrefix + 'billingDetailsSetupEdit').removeClass('hidden');
                switch(currBillSetup) {
                    case addToExisting:
                        $('#' + idPrefix + 'existingBillingAccountEdit').removeClass('hidden');
                        $('#' + idPrefix + 'newBillingAccountEdit').addClass('hidden');
                        $('#' + idPrefix + 'unknownBillingStructureEdit').addClass('hidden');
                        // clear values in sections that are not displayed
                        $('#' + idPrefix + 'newBillingAccountEdit input').each(function () {
                             // as per 103324 skip all hidden except lookup id of the contact
                             if ($(this).prop('type') != 'hidden' || $(this).prop('id').indexOf(':BCLookup_lkid') != -1) {
                                 $(this).val('');
                             }
                        });
                        //
                        $('#' + idPrefix + 'newBillingAccountEdit select').each(function () {
                            $(this).val('');
                        });
                        $('#' + idPrefix + 'unknownBillingStructureEdit\\:complexBillingStructureArea').val('');
                        break;
                    case createNewBillAcc:
                        $('#' + idPrefix + 'existingBillingAccountEdit').addClass('hidden');
                        $('#' + idPrefix + 'newBillingAccountEdit').removeClass('hidden');
                        $('#' + idPrefix + 'unknownBillingStructureEdit').addClass('hidden');
                        // clear values in sections that are not displayed
                        $('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount').val('');
                        $('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount_lkid').val('');
                        //
                        $('#' + idPrefix + 'unknownBillingStructureEdit\\:complexBillingStructureArea').val('');
                        break;
                    case unknownStructure:
                        $('#' + idPrefix + 'existingBillingAccountEdit').addClass('hidden');
                        $('#' + idPrefix + 'newBillingAccountEdit').addClass('hidden');
                        $('#' + idPrefix + 'unknownBillingStructureEdit').removeClass('hidden');
                        // clear values in sections that are not displayed
                        $('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount').val('');
                        $('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount_lkid').val('');
                        //
                        $('#' + idPrefix + 'newBillingAccountEdit input').each(function () {
                             // as per 103324 skip all hidden except lookup id of the contact
                             if ($(this).prop('type') != 'hidden' || $(this).prop('id').indexOf(':BCLookup_lkid') != -1) {
                                 $(this).val('');
                             }
                        });
                        //
                        $('#' + idPrefix + 'newBillingAccountEdit select').each(function () {
                            $(this).val('');
                        });
                        break;
                    default:
                        $('#' + idPrefix + 'existingBillingAccountEdit').addClass('hidden');
                        $('#' + idPrefix + 'newBillingAccountEdit').addClass('hidden');
                        $('#' + idPrefix + 'unknownBillingStructureEdit').addClass('hidden');
                        // clear values in sections that are not displayed
                        $('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount').val('');
                        $('#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount_lkid').val('');
                        //
                        $('#' + idPrefix + 'newBillingAccountEdit input').each(function () {
                             // as per 103324 skip all hidden except lookup id of the contact
                             if ($(this).prop('type') != 'hidden' || $(this).prop('id').indexOf(':BCLookup_lkid') != -1) {
                                 $(this).val('');
                             }
                        });
                        //
                        $('#' + idPrefix + 'newBillingAccountEdit select').each(function () {
                            $(this).val('');
                        });
                        $('#' + idPrefix + 'unknownBillingStructureEdit\\:complexBillingStructureArea').val('');
                }
            }
            
           /**
             * function enables/disabled change of billing setup options
             *
             * @param mode enable/disable
             */
            function enableBillingSetupChange() {
                var idPrefix = 'p\\:b\\:BasketHeaderSection\\:billingDetails\\:';
                var currBillSetup = $('#' + idPrefix + 'billingDetailsSetupEdit\\:billingSetup').val();
                var addToExisting = 'Add To Existing Structure';
                var createNewBillAcc = 'Create New Account';
                var unknownStructure = 'Unknown/Complex Structure';
                var elemId;
        
                // enable change
                if (billingSetupChangeDisabled) {
                    billingSetupChangeDisabled = false;
                    // show button Change Billing Setup
                    $('#saveBillingSetup').removeClass('hidden');
                    $('#cancelEditBillingSetup').removeClass('hidden');
                    $('#changeBillingSetup').addClass('hidden');
                    //
                    $('#' + idPrefix + 'existingBillingAccountEdit img').removeClass('hidden');
                    $('#' + idPrefix + 'newBillingAccountEdit img').removeClass('hidden');
                    // remember current values on the screen
                    currentBillingSetup = {};
                    currentBillingSetup['currentSetup'] = currBillSetup;
                    
                    switch(currBillSetup) {
                        case addToExisting:
                            elemId = '#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount';
                            currentBillingSetup[elemId] = $(elemId).val();
                            elemId = '#' + idPrefix + 'existingBillingAccountEdit\\:basketBillingAccount_lkid';
                            currentBillingSetup[elemId] = $(elemId).val();
                            break;
                        case createNewBillAcc:
                            $('#' + idPrefix + 'newBillingAccountEdit input').each(function () {
                                // as per 103324 skip all hidden except lookup id of the contact
                                if ($(this).prop('type') != 'hidden' || $(this).prop('id').indexOf(':BCLookup_lkid') != -1) {
                                    // replace all : --> \: jQuery escape :
                                    currentBillingSetup[$(this).prop('id').replace(/\:/g, '\\:')] = $(this).val();
                                }
                            });
                            //
                            $('#' + idPrefix + 'newBillingAccountEdit select').each(function () {
                                // replace all : --> \: jQuery escape :
                                currentBillingSetup[$(this).prop('id').replace(/\:/g, '\\:')] = $(this).val();
                            });
                            break;
                        case unknownStructure:
                            elemId = '#' + idPrefix + 'unknownBillingStructureEdit\\:complexBillingStructureArea';
                            currentBillingSetup[elemId] = $(elemId).val();
                            break;
                        default:
                    }
                                                                           
                } else {
                    billingSetupChangeDisabled = true;
                    // hide buttons Save Changes and Cancel Edit
                    $('#saveBillingSetup').addClass('hidden');
                    $('#cancelEditBillingSetup').addClass('hidden');
                    $('#changeBillingSetup').removeClass('hidden');
                    //
                    $('#' + idPrefix + 'existingBillingAccountEdit img').addClass('hidden');
                    $('#' + idPrefix + 'newBillingAccountEdit img').addClass('hidden');
                }
                //
                window.console.log('-->' + currBillSetup);
                $('#' + idPrefix + 'existingBillingAccountEdit input').prop('disabled', billingSetupChangeDisabled);
                $('#' + idPrefix + 'newBillingAccountEdit input:not(.notEditable)').prop('disabled', billingSetupChangeDisabled);
                $('#' + idPrefix + 'newBillingAccountEdit select').prop('disabled', billingSetupChangeDisabled);
                $('#' + idPrefix + 'unknownBillingStructureEdit textarea').prop('disabled', billingSetupChangeDisabled);
                //
                $('#' + idPrefix + 'billingDetailsSetupEdit select').prop('disabled', billingSetupChangeDisabled);
            }

            /**
             * function shows/hides element (holding cell) and its label (holding cell)
             *
             * @param elemId element id that is processed
             * @param action action required show/hide
             */
            function showHideHoldingCellAndLabel(elemId, action){
                // because jQuery requires escaping with \\ when id has special characters :
                var realElemId = $('#' + elemId).prop('id');
                if (action == 'show') {
                    $('#' + elemId).parent().show();
                    $("label[for='" + realElemId + "']").show();
                }
                if (action == 'hide') {
                    $('#' + elemId).parent().hide();
                    $("label[for='" + realElemId + "']").hide();
                }
            }
                       
            /**
             * function shows/hides and clears bank account fields based on payment method selection
             *
             */
            function changePaymentMethod() {
                var basketHeaderId = '{!cscfga__Product_Basket__c.Id}' == '' ? 'NewBasketHeaderSection' : 'BasketHeaderSection';
                var idPrefix = 'p\\:b\\:' + basketHeaderId + '\\:billingDetails\\:newBillingAccountEdit\\:';
                var directDebit = 'Direct Debit';
                //
                if ($('#' + idPrefix + 'BCPaymentMethod').val() == directDebit){
                    showHideHoldingCellAndLabel(idPrefix + 'bankAccNumber', 'show');
                    showHideHoldingCellAndLabel(idPrefix + 'bankSortCode', 'show');
                    showHideHoldingCellAndLabel(idPrefix + 'branchName', 'show');
                    showHideHoldingCellAndLabel(idPrefix + 'branchBIC', 'show');
                    showHideHoldingCellAndLabel(idPrefix + 'bankName', 'show');
                    showHideHoldingCellAndLabel(idPrefix + 'bankBIC', 'show');
                } else {
                    showHideHoldingCellAndLabel(idPrefix + 'bankAccNumber', 'hide');
                    showHideHoldingCellAndLabel(idPrefix + 'bankSortCode', 'hide');
                    showHideHoldingCellAndLabel(idPrefix + 'branchName', 'hide');
                    showHideHoldingCellAndLabel(idPrefix + 'branchBIC', 'hide');
                    showHideHoldingCellAndLabel(idPrefix + 'bankName', 'hide');
                    showHideHoldingCellAndLabel(idPrefix + 'bankBIC', 'hide');
                    //
                    $('#' + idPrefix + 'bankAccNumber').val('');
                    $('#' + idPrefix + 'bankSortCode').val('');
                    $('#' + idPrefix + 'branchName').val('');
                    $('#' + idPrefix + 'branchBIC').val('');
                    $('#' + idPrefix + 'bankName').val('');
                    $('#' + idPrefix + 'bankBIC').val('');
                }
            }
            /* billing section edit functions --------------------------- end */
                    
            /**
             * function invokes remote action that initiates approval process-es for selected product configuration requests
             *
             */
            function requestApproval() {
                var products = {};
                var prodConfReqId;
                var appComment;
                var missingCommAppComment = false;
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                
                $('.selProdConfReq').each(function () {
                    if ($(this).prop('checked')){
                        prodConfReqId = $(this).parent().parent().prop('id');
                        // if comment textarea exists then check if it has value - it will exist only for records that have Commercial Approval set tu Required
                        if ($('#' + getCommericalApprovalCommentId(prodConfReqId)).length > 0) {
                            appComment = $('#' + getCommericalApprovalCommentId(prodConfReqId)).val().trim();
                            // if comment is not provided expand details and do not initiate approval process
                            if(appComment.length == 0) {
                                showHideProdConfDets(getProdConfDetsId(prodConfReqId));
                                missingCommAppComment = true;
                            } else {
                                products[prodConfReqId] = appComment;
                            }
                        } else {
                            // if comment is not required send empty string
                            products[prodConfReqId] = '';
                        }
                    }
                    
                });
                if (missingCommAppComment) {
                    growlNow('Please provide reasons for approval process before requesting approval.');
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    return;
                }
                // window.console.log(JSON.stringify(products));
                if (!$.isEmptyObject(products)) {
                    // initiate Controller method that will initiate requests
                    Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.CSBasketBuilderEController.requestApproval}',
                                JSON.stringify(products),
                                handleRequestApprovalResponse,
                                {escape: false}
                            );
                       // for (j in products){
                       //     window.console.log('id >> ' + products[j]);
                       // }
                } else {
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    growlNow('Nothing selected');
                }
            }
                 
            /**
             * function handles requestApproval response and refreshes basket content
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleRequestApprovalResponse(result, event){
                if (event.type === 'exception') {
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    growlNow(event.message);
                } else {
                    growlNow('Request for Approval initiated!');
                    gAppProcessMsgs = JSON.parse(result);
                    //
                    refreshBasketContent();
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                }
            }

            /**
             * function invokes submitAnOrder remote action -> marks product basket
             * is ready to create an opportunity/do additional processing
             *
             */
            function submitAnOrder() {
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.CSBasketBuilderEController.submitAnOrder}',
                                '{!cscfga__Product_Basket__c.Id}',
                                handleSubmitAnOrderResponse,
                                {escape: false, timeout: 120000}
                            );
             }
                        
            /**
             * function handles submitAnOrder response and disables
             * all actions in product bakset
             *
             * @param result not aplicable
             * @param event holds infromation about returning event
             */
            function handleSubmitAnOrderResponse(result, event){
                if (event.type === 'exception') {
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    growlNow(event.message);
                } else {
                    var resultJSON = JSON.parse(result);
                    switch (resultJSON.status) {
                        case 'success':
                            disableButtonsBasketReadOnly(true);
                            disableBasketContentActions(true);
                            // refreshBasketContent();
                            growlNow(resultJSON.message);
                            break;
                        case 'error':
                            growlNow(resultJSON.errorMessage);
                            break;
                    }
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                }
            }
            
            /**
             * function changes previously selected offer, for selected product configuration request re-offers available
             * offers and associates new product configuration against product configuration request (T-09807)
             *
             */
            function changeSelectedOffer() {
                blockScreenElement('.manageBasketProducts');
                blockScreenElement('.addProductToBasket');
                // only one record can be processed at the time
                if ($('.selProdConfReq:checked').length != 1) {
                    growlNow('Please select single row to initiate the change process!');
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    return;
                }
                
                // if conditions are satisfied show list of available offers
                var prodConfReqId;
                $('.selProdConfReq:checked').each(function () {
                    prodConfReqId = $(this).parent().parent().prop('id');
                });
                // for high level product stop processing because for high level product offer selection is done differently
                if (gConfReqDets[prodConfReqId].isHighLevelProduct) {
                    growlNow('Offer change is applicable only for detailed products.');
                    $('.manageBasketProducts').unblock();
                    $('.addProductToBasket').unblock();
                    return;
                }
                $('.manageBasketProducts').unblock();
                $('.addProductToBasket').unblock();
                
                showAvailableOffers(prodConfReqId, gConfReqDets[prodConfReqId].productCategoryId);
             }
             
             /**
             * gets the site prefix used for link generation (introduced to support communities)
             */
             function getPathPrefix(){
                 Visualforce.remoting.Manager.invokeAction(
                             '{!$RemoteAction.CSBasketBuilderEController.getPathPrefix}',
                             handleGetPathPrefix,
                             {escape: false}
                         );
             }
             
             /**
              * handles the response from getPathPrefix
              */
             function handleGetPathPrefix(result, event) {
                 sitePrefix = result != '' ? result : '/apex';
             }
             
             //})(jQuery);
        </script>
        <!-- basket header section -->
        <CSSX:Calendar usesHeaderBar="true" defaultView="D" permittedSelectionCount="1" closeOnSelectionCount="true" />
        <apex:pageBlock id="oppClosedBasketHeaderSection" rendered="{!IF(cscfga__Product_Basket__c.Id =='' && isOppClosed, true, false)}" title="Product Basket" >
            <apex:pageBlockButtons id="BasketHeaderSectionButtons" location="bottom">
                <apex:commandButton id="cancelBasketBtn" action="{!cancel}" value="Back To Opportunity"/>
            </apex:pageBlockButtons>
            <apex:pageMessage summary="You cannot create a new product basket once the opportunity is closed won." severity="info" strength="2" />
        </apex:pageBlock>
        <apex:pageBlock id="NewBasketHeaderSection" rendered="{!IF(cscfga__Product_Basket__c.Id =='' && not isOppClosed, true, false)}" title="Product Basket" >
            <apex:pageBlockButtons id="BasketHeaderSectionButtons" location="top">
                <input type="button" value="Save" id="save" onclick="saveProdBasket()" class="btn" />
            </apex:pageBlockButtons>
            <!-- General Details sections -->
            <apex:pageBlockSection id="generalDetails" title="General Details" showHeader="true" collapsible="true">
                <apex:inputField id="basketName" value="{!cscfga__Product_Basket__c.Name}" label="{!$ObjectType.cscfga__Product_Basket__c.label} Name" />
                <apex:inputField id="basketAccount" value="{!cscfga__Product_Basket__c.csbb__Account__c}" />
                <apex:outputField value="{!cscfga__Product_Basket__c.csbb__Includes_High_Level_Products__c}" id="incHLP"/>
                <!--<apex:inputField id="basketContractingAccount" value="{!cscfga__Product_Basket__c.Contracting_Company__c}" />  -->
                <apex:inputField value="{!cscfga__Product_Basket__c.cscfga__Opportunity__c}" required="false" />
            </apex:pageBlockSection>
            
            <!-- <c:DemoComponent/> -->
            
            <!-- Revenue Details sections -->
            <!--<apex:pageBlockSection id="revenueDetails" title="Revenue Details" showHeader="true" collapsible="true">
                <apex:outputField value="{!cscfga__Product_Basket__c.total_MRC__c}" id="basketTotalMRC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_QRC__c}" id="basketTotalQRC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_YRC__c}" id="basketTotalYRC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_OC__c}" id="basketTotalOC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_SOV__c}" id="basketTotalSOV" rendered="{!IsStandardUser}"/>
            </apex:pageBlockSection>-->
            <!-- Billing Details sections -->
            <!--<apex:pageBlockSection id="billingDetails" title="Billing Details" showHeader="true" collapsible="true" columns="1" rendered="{!IsStandardUser}">
                <apex:outputPanel >
                    <apex:pageBlockSection id="billingDetailsSetupEdit">
                        <apex:inputField id="billingSetup" value="{!cscfga__Product_Basket__c.Billing_Setup__c}" onchange="changeBillingSetupOption()">
                            <apex:actionSupport event="onchange"/>
                        </apex:inputField>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection id="existingBillingAccountEdit">
                        <apex:inputField id="basketBillingAccount" value="{!cscfga__Product_Basket__c.Billing_Account__c}" />
                    </apex:pageBlockSection>
                    <apex:pageBlockSection id="newBillingAccountEdit">
                        <apex:inputField value="{!cscfga__Product_Basket__c.Billing_Contact__c}" id="BCLookup" taborderhint="1"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Payment_Method__c}" id="BCPaymentMethod" onchange="changePaymentMethod();" taborderhint="7" />
                        <apex:inputField value="{!cscfga__Product_Basket__c.Building_Name_Number__c}" id="BABuildingNameNumber" taborderhint="2"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_Account_Number__c}" id="bankAccNumber" taborderhint="8" />
                        <apex:inputField value="{!cscfga__Product_Basket__c.Street__c}" id="BAStreet" taborderhint="3"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_Sort_Code__c}" id="bankSortCode" taborderhint="9"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Town_City__c}" id="BATownCity" taborderhint="4"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Branch_Name__c}" id="branchName" taborderhint="10" styleClass="notEditable"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Post_Code__c}" id="BAPostcode" taborderhint="5"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Branch_BIC__c}" id="branchBIC" taborderhint="11" styleClass="notEditable"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.County__c}" id="BACounty" taborderhint="6"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_Name__c}" id="bankName" taborderhint="12" styleClass="notEditable"/>
                        <apex:outputLabel />
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_BIC__c}" id="bankBIC" taborderhint="13" styleClass="notEditable"/>
                         
                    </apex:pageBlockSection>
                    <apex:pageBlockSection id="unknownBillingStructureEdit">
                        <apex:inputField value="{!cscfga__Product_Basket__c.Complex_Billing_Structure_Details__c}" styleClass="complexBillingStructure" id="complexBillingStructureArea" />
                    </apex:pageBlockSection>
                </apex:outputPanel>
            </apex:pageBlockSection>-->
        </apex:pageBlock>

        <apex:pageBlock id="BasketHeaderSection" rendered="{!IF(cscfga__Product_Basket__c.Id =='',false, true)}" title="Product Basket">
            <apex:pageBlockButtons id="BasketHeaderSectionButtons" location="top">
                <input type="button" value="Save" id="save" onclick="saveProdBasket()" class="btn" />
                <apex:outputPanel rendered="{! not IsStandardUser}">
                    <input type="button" value="Submit the Order" id="submitTheOrderButton" onclick="submitAnOrder();" class="btn" />
                </apex:outputPanel>
                <apex:commandButton action="{!cancel}" id="cancelButton" value="Cancel"/>
                <apex:commandButton action="{!cancelInlineEdit}" id="cancelInlineEditButton" value="Cancel" style="display:none" />
            </apex:pageBlockButtons>
            <!-- General Details sections -->
            <apex:pageBlockSection id="generalDetails" title="General Details" showHeader="true" collapsible="true">
                <apex:outputField id="basketName" value="{!cscfga__Product_Basket__c.Name}" label="{!$ObjectType.cscfga__Product_Basket__c.label} Name" >
                    <apex:inlineEditSupport showOnEdit="cancelInlineEditButton" hideOnEdit="cancelButton" event="ondblclick" />
                </apex:outputField>
                <apex:outputField id="basketAccount" value="{!cscfga__Product_Basket__c.csbb__Account__c}">
                    <apex:inlineEditSupport showOnEdit="cancelInlineEditButton" hideOnEdit="cancelButton" event="ondblclick" />
                </apex:outputField>
                <apex:outputField value="{!cscfga__Product_Basket__c.csbb__Includes_High_Level_Products__c}" id="incHLP"/>
                <!--<apex:outputField value="{!cscfga__Product_Basket__c.Contracting_Company__c}" id="contractingCompany" >
                    <apex:inlineEditSupport showOnEdit="cancelInlineEditButton" hideOnEdit="cancelButton" event="ondblclick" />
                </apex:outputField>-->
                <apex:outputField value="{!cscfga__Product_Basket__c.cscfga__Opportunity__c}">
                    <apex:inlineEditSupport showOnEdit="cancelInlineEditButton" hideOnEdit="cancelButton" event="ondblclick" />
                </apex:outputField>
                <!--<apex:outputField value="{!cscfga__Product_Basket__c.Synchronised_with_Opportunity__c}" />-->
            </apex:pageBlockSection>
            <apex:pageBlockSection id="customediting" title="Custom Fields" showHeader="true" collapsible="true" rendered="{!CustomFieldsAdded}">
                <apex:repeat value="{!$ObjectType.cscfga__Product_Basket__c.FieldSets.csbb__Custom_Field_Set}" var="field">
                    <apex:inputField value="{!cscfga__Product_Basket__c[field]}" />
                </apex:repeat>
            </apex:pageBlockSection>
            <!-- Revenue Details sections -->
            <!--<apex:pageBlockSection id="revenueDetails" title="Revenue Details" showHeader="true" collapsible="true">
                <apex:outputField value="{!cscfga__Product_Basket__c.total_MRC__c}" id="basketTotalMRC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_QRC__c}" id="basketTotalQRC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_YRC__c}" id="basketTotalYRC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_OC__c}" id="basketTotalOC"/>
                <apex:outputField value="{!cscfga__Product_Basket__c.total_SOV__c}" id="basketTotalSOV" rendered="{!IsStandardUser}"/>
            </apex:pageBlockSection>-->
            <!-- Billing Details sections -->
            <!--<apex:pageBlockSection id="billingDetails" title="Billing Details" showHeader="true" collapsible="true" columns="1" rendered="{!IsStandardUser}">
                <apex:outputPanel >
                   <apex:pageBlockSection id="billingDetailsSetupEdit" columns="1">
                        <apex:inputField id="billingSetup" value="{!cscfga__Product_Basket__c.Billing_Setup__c}" onchange="changeBillingSetupOption()">
                           <apex:actionSupport event="onchange"/>
                        </apex:inputField>
                    </apex:pageBlockSection>
                               
                    <apex:pageBlockSection id="existingBillingAccountEdit">
                        <apex:inputField id="basketBillingAccount" value="{!cscfga__Product_Basket__c.Billing_Account__c}" />
                    </apex:pageBlockSection>
                                                
                    <apex:pageBlockSection id="newBillingAccountEdit">
                        <apex:inputField value="{!cscfga__Product_Basket__c.Billing_Contact__c}" id="BCLookup" taborderhint="1"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Payment_Method__c}" id="BCPaymentMethod" onchange="changePaymentMethod();" taborderhint="7" />
                        <apex:inputField value="{!cscfga__Product_Basket__c.Building_Name_Number__c}" id="BABuildingNameNumber" taborderhint="2"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_Account_Number__c}" id="bankAccNumber" taborderhint="8" />
                        <apex:inputField value="{!cscfga__Product_Basket__c.Street__c}" id="BAStreet" taborderhint="3"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_Sort_Code__c}" id="bankSortCode" taborderhint="9"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Town_City__c}" id="BATownCity" taborderhint="4"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Branch_Name__c}" id="branchName" taborderhint="10" styleClass="notEditable"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Post_Code__c}" id="BAPostcode" taborderhint="5"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Branch_BIC__c}" id="branchBIC" taborderhint="11" styleClass="notEditable"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.County__c}" id="BACounty" taborderhint="6"/>
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_Name__c}" id="bankName" taborderhint="12" styleClass="notEditable"/>
                        <apex:outputLabel />
                        <apex:inputField value="{!cscfga__Product_Basket__c.Bank_BIC__c}" id="bankBIC" taborderhint="13" styleClass="notEditable"/>
                    </apex:pageBlockSection>
                        
                    <apex:pageBlockSection id="unknownBillingStructureEdit">
                        <apex:inputField value="{!cscfga__Product_Basket__c.Complex_Billing_Structure_Details__c}" styleClass="complexBillingStructure" id="complexBillingStructureArea"/>
                    </apex:pageBlockSection>
                </apex:outputPanel>
            </apex:pageBlockSection>-->
            <apex:actionFunction name="saveBillingSetupChangeAction" action="{!saveBillingSetupChange}" rerender="" />
        </apex:pageBlock>
        <!-- adding product/offer to basket -->
        <apex:outputPanel styleClass="addProductToBasket" layout="block">
            <apex:pageBlock id="addProductToBasket" title="Add Product/Offer To Basket" rendered="{!IF(cscfga__Product_Basket__c.Id=='',false, true)}">
                <apex:pageBlockButtons id="AddToBasketBlockButtons" location="top">
                    <input type="button" id="detailedHighLevelBtn" value="Switch to High Level Products" onclick="detailedHighLevelSwitch()" class="btn"/>
                    <input type="button" id="AddToBasket" value="Add to Basket" onclick="addToBasket();" class="btn"/>
                </apex:pageBlockButtons>
                <table id="detailedProductSelector">
                    <tr style="height:20px;">
                        <th>Product Category</th>
                        <th id="productFilterTH" class="hidden">Product Filter</th>
                        <!--<th id="addressCheckBoxTH" class="hidden">Address check</th>-->
                        <th id="availableAddressListTH" class="hidden">EASY Address</th>
                        <th id="osreIdTH" class="hidden">Selected EASY Id</th>
                        <!--<th>Date</th>-->
                        <th class="hidden">Quantity</th>
                    </tr>
                    <tr>
                        <td id="addDetailedProductTD">
                            <select id="addDetailedProduct" onchange="refreshRequiredFieldsForProdCat()"></select>
                        </td>
                        <td id="avblChksTD" class="hidden">
                            <fieldset id="avblChks">
                                <!--<input type="checkbox" id="avblChkAll"/>Select All<br />-->
                                <apex:repeat value="{!allServiceNames}" var="calloutService">
                                <div id="avCheckDiv{!calloutService}" style="display:none"><input type="checkbox" class="selectMe" id="avCheck{!calloutService}" />{!calloutService}</div>
                                </apex:repeat>
                            </fieldset>
                        </td>
                        <!--<td class="hidden" id="addressCheckBoxTD">
                            <input type="checkbox" id="addressCheckBox" checked="checked" onchange="switchAddressInput($(this))" />
                        </td>-->
                        <td class="hidden" id="availableAddressListTD">
                            <table id="searchAddressFields">
                                <tr><td>City</td><td><input type="text" id="cityInput" /></td></tr>
                                <tr><td>Postal code</td><td><input type="text" id="postalCodeInput" /></td></tr>
                                <tr><td>Street name</td><td><input type="text" id="streetNameInput" /></td></tr>
                                <tr><td>Street number</td><td><input type="text" id="streetNumberInput" /></td></tr>
                                <tr><td></td><td><input type="button" id="invokeAddressCheck" value="Get Addresses" onClick="getAvailableAddresses($(this));" class="btn"/></td></tr>
                            </table>
                            <div id="availableAddressList"></div>
                            <div id="selectedBTAddress" onclick="showAvailableAddresses()">Select EASY Address</div>
                            <!--<input type="text" id="inputBTAddress" onchange="directInputBTAddress($(this))" class="hidden"/>-->
                        </td>
                        <td class="hidden" id="osreIdTD">
                            <input type="text" id="osreId" disabled="disabled" />
                        </td>
                        <td class="hidden"><input class="hidden" type="text" id="quantityDLP" value="1"/></td>
                        <!--<td id="desiredDateTR">
                            <table id="desiredDateFields">
                                <tr>
                                    <td>Desired date</td>
                                    <td>
                                        <input type="text" id="desiredDateInput" disabled="disabled" />
                                        <input type="button" value="Set date" onclick="displayCalendar($('#desiredDateInput'), -1)" />
                                    </td>
                                </tr>
                            </table>
                        </td>-->
                    </tr>
                </table>
                <table id="highLevelProductSelector" class="hidden">
                    <tr>
                        <th>Product Category</th>
                        <th>Offer</th>
                    </tr>
                    <tr>
                        <td id="highLevelProductCategoriesTD">
                            <select id="highLevelProductCategories" onchange="getHighLevelOffersForCategory()"></select>
                        </td>
                        <td id="highLevelOffersTD">
                            <select id="highLevelOffers"></select>
                        </td>
                        <td><input class="hidden" type="text" id="quantityHLP" value="1"/></td>
                    </tr>
                </table>
            
            </apex:pageBlock>
        </apex:outputPanel>
         
        <!-- Management of products defined in the basket -->
        <apex:outputPanel styleClass="manageBasketProducts" layout="block">
            <apex:pageBlock id="manageBasketProducts" title="Manage Product in Basket" rendered="{!IF(cscfga__Product_Basket__c.Id=='',false, true)}" >
                <apex:pageBlockButtons >
                    <input type="button" id="manageBasketDeleteSelected" value="Delete Selected" onClick="deleteFromBasket();" class="btn"/>
                    <apex:outputPanel rendered="{!IsStandardUser}">
                        <apex:outputPanel rendered="{!IF(cscfga__Product_Basket__c.cscfga__Opportunity__c == '', false, true)}">
                            <input type="button" id="manageBasketSynchronizeWithOpportunity" value="Synchronise With Opportunity" onClick="syncBasketWithOpportunity();" class="btn"/>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="false"><input type="button" id="manageRequestApproval" value="Request Approval" onClick="requestApproval();" class="btn"/></apex:outputPanel>
                    </apex:outputPanel>
                    <apex:outputPanel rendered="false"><input type="button" id="changeSelOffer" value="Change Selected Offer" onClick="changeSelectedOffer();" class="btn" /></apex:outputPanel>
                    <input type="button" id="cloneSelOffer" value="Clone Selected" onClick="cloneProductsOverlay();" class="btn"/>
                </apex:pageBlockButtons>
                <table class="list productRequestsTable">
                <thead id="productBasketContentHeader">
                </thead>
                <tbody id="productBasketContent">
                    <!-- <tr class="dataRow"><td colspan="16" class="dataCell">Product basket is empty.</td></tr> -->
                </tbody>
            </table>
        </apex:pageBlock>
        </apex:outputPanel>
        <input type="hidden" value="{!cscfga__Product_Basket__c.csbb__Account__c}" id="pbAccountId"/>
        
        <input type="hidden" id="hiddenParam1"/>
        <input type="hidden" id="hiddenParam2"/>
        
        <apex:actionFunction name="saveProdBasketAction" action="{!save}" />
        <!--<apex:variable var="submitAnOrder" value="{!cscfga__Product_Basket__c.SubmitAnOrder__c}" rendered="false" />-->
    </apex:form>
</apex:page>